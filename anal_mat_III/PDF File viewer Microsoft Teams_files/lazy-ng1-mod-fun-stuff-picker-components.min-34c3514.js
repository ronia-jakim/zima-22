webpackJsonp([15],{2600:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(2601),n(2604),n(2606),n(2608),n(126),n(2611),n(323),n(2613),n(2616),n(2619)},2601:function(e,t,n){"use strict";var i=this&&this.__extends||function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}();Object.defineProperty(t,"__esModule",{value:!0});var a=n(88),o=n(2602),s=n(2603),r=function(e){function t(t,n,i,a,o,s,r,c,l,p,m,u,d,h,g,f,k,v,y,S,x,C,b,M){var E=e.call(this,t,n,i,a,o,s,c,p,r,u,d,f,k,y,S,x,h,g,b,"inputExtensionList","inputExtensionListPickerButton",C)||this;return E.$scope=t,E.ariaLiveService=n,E.resources=i,E.constants=a,E.settingsService=o,E.eventingService=s,E.emojiEmoticonCategoryService=r,E.commandsService=c,E.inputExtensionService=l,E.loggingService=p,E.analyticsService=m,E.channelService=u,E.tenantSettingsStore=d,E.tooltipService=h,E.utilityService=g,E.sxConfig=f,E.$translate=k,E.$timeout=v,E.$q=y,E.$popover=S,E.$element=x,E.$ocLazyLoad=C,E.channelMembershipPropertiesService=b,E.localizationService=M,E.searchPreviewResults=[],E.popoverTemplateUrl="components/fun-stuff-picker/input-extension-list.html",E}return i(t,e),t.$inject=["$scope","ariaLiveService","resources","constants","settingsService","eventingService","emojiEmoticonCategoryService","commandsService","inputExtensionService","loggingService","analyticsService","channelService","tenantSettingsStore","tooltipService","utilityService","sxConfig","$translate","$timeout","$q","$popover","$element","$ocLazyLoad","channelMembershipPropertiesService","localizationService"],t.prototype.customLoadPopoverAssets=function(){this.searchPreviewResults=[],this.viewModel=new a.InputExtensionViewModel(this.inputExtension,this.skypeConversationId,this.newMessageControllerObjId,this.inputExtensionService,this.utilityService,this.eventingService,this.constants,this.$q,this.loggingService,this.analyticsService,this.$translate,this.resources,this.ariaLiveService,this.localizationService,this.settingsService)},t}(teamspace.components.BaseInputExtension);t.InputExtensionListController=r,angular.module("teamspace.inputExtensionList",["focusOn","teamspace.localizationService"]).directive("inputExtensionList",[function(){return{restrict:"E",scope:{ctrlid:"@"},transclude:!0,bindToController:{messageType:"=?",avoidScreenEdge:"<?",skypeConversationId:"=?",teamName:"=?",inputExtension:"=?"},controllerAs:"listCtrl",templateUrl:"components/fun-stuff-picker/input-extension-list-button.html",controller:r}}]).run(["$templateCache",function(e){e.put("components/fun-stuff-picker/input-extension-list.html",o),e.put("components/fun-stuff-picker/input-extension-list-button.html",s)}])},2602:function(e,t){e.exports='<div class="popover list-input-extension-popover input-extension-popover top">\n  <div class="loading" ng-if="listCtrl.loading">\n    <div translate-once="{{::$root.resources.strings.funStuffPicker_loadingDataLabel}}"></div>\n    <busy-animation></busy-animation>\n  </div>\n  <div class="fun-stuff-content" ng-if="!listCtrl.loading" ng-mousedown="listCtrl.clearBanner()" acc-role="dialog">\n    <input-extension-search-list view-model="listCtrl.viewModel"></input-extension-search-list>\n  </div>\n</div>'},2603:function(e,t){e.exports='\x3c!-- We need the high padding to prevent the popover overlaying on new-message area on non-expanded state.--\x3e\n<button type="button" class="ts-sym pull-right icons-emoji app-icons-fill-hover shortcuts-funstuff" data-template-url="components/fun-stuff-picker/input-extension-list.html" ng-click="listCtrl.loadPopoverAssets()" track-outcome="{{::$root.trackConstants.trackOutcome.nav}}" track-scenario="{{::$root.trackConstants.trackScenario.composeOpenFunPicker}}" track-scenario-type="{{::$root.trackConstants.trackScenarioType.composeMsg}}" track-name="{{::$root.trackConstants.trackModuleName.funStuffPicker}}" track-type="{{::$root.trackConstants.trackType.compose}}" track-summary="list picker" data-prevent-refocus="true" ts-event-class="{ \'tooltip.show\': \'selected\', \'tooltip.hide\': \'-selected\' }" data-tid="listPickerButton">\n  <ng-transclude></ng-transclude>\n</button>\n'},2604:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(126),a=n(2605),o=n(23),s=n(265),r=function(){function e(t,n,i,a,o,s,r,c,l){var p=this;this.$scope=t,this.constants=n,this.eventingService=i,this.utilityService=a,this.resources=o,this.loggingService=s,this.analyticsService=r,this.$popover=c,this.$timeout=l,this.currentViewModelIndex=0,this.debouncedSearchTextChanged=_.debounce(function(){p.executeCommandRequest()},e.debounceSearchWaitTime),this.viewModel&&!this.viewModel.useExternalInputSource&&this.loadDefaultItems(),this.viewModel&&this.viewModel.inputExtensionItem&&this.viewModel.inputExtensionItem.commands&&this.viewModel.inputExtensionItem.commands.length>0&&(this.selectedCommandId=this.viewModel.inputExtensionItem.commands[this.currentViewModelIndex].id),this.initialRunHasBeenRun=!1}return e.$inject=["$scope","constants","eventingService","utilityService","resources","loggingService","analyticsService","$popover","$timeout"],Object.defineProperty(e.prototype,"viewModel",{get:function(){return this.viewModels[this.currentViewModelIndex]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"noInitialRunLoading",{get:function(){return this.viewModel&&(this.viewModel.noInitialRunLoadingText||this.initialRunHasBeenRun)},enumerable:!0,configurable:!0}),e.prototype.handleSearchKeyPress=function(e){e.which===this.constants.keyCodes.enter&&this.executeCommandRequest()},e.prototype.searchTextChanged=function(){this.debouncedSearchTextChanged()},e.prototype.onItemClicked=function(e,t){this.viewModel&&this.viewModel.itemSelected(e);var n=this.viewModel.inputExtensionItem.externalId?"<retracted_sideloaded_or_custombot>":this.viewModel.inputExtensionItem.name;o.ComposeExtensionTelemetryHelper.logTelemetryForInputExtensionResult(this.loggingService,this.analyticsService,"selectComposeBoxSearchResult",this.viewModel.inputExtensionItem.appId,n,this.viewModel.inputExtensionItem.botId,t)},e.prototype.loadDefaultItems=function(){var e=this;this.viewModel&&this.viewModel.loadDefaultItems().finally(function(){return e.initialRunHasBeenRun=!0})},e.prototype.onSearchListClicked=function(){this.eventingService.$emit(this.constants.events.inputExtension.dismissContextMenu)},e.prototype.executeCommandRequest=function(){this.viewModel&&this.viewModel.executeCommand()},e.prototype.loadMore=function(){this.viewModel&&this.viewModel.loadMore()},e.prototype.onCommandTabClicked=function(e){this.selectedCommandId=e,this.currentViewModelIndex=_.findIndex(this.viewModels,function(t){return t.currentCommandId===e}),this.viewModel.onCommandExecuted()},Object.defineProperty(e.prototype,"createDropdown",{get:function(){return this.createDropdownHelper||(this.createDropdownHelper=new i.InputExtensionCreateDropdown(this.$scope,this.constants,this.eventingService,this.$popover,this.$timeout)),this.createDropdownHelper},enumerable:!0,configurable:!0}),e.prototype.onCreateCommandDropdown=function(){this.createDropdown.show($(event.currentTarget),"right","input-extensions-create-dropdown-right")},e.debounceSearchWaitTime=500,e}();t.InputExtensionSearchListController=r,angular.module("teamspace.inputExtensionSearchList",["focusOn"]).directive("inputExtensionSearchList",[function(){return{restrict:"E",scope:!0,bindToController:{viewModels:"=",isTooltipVisible:"=",selectedItem:"="},controllerAs:"searchCtrl",templateUrl:"components/fun-stuff-picker/input-extension-search-list.html",controller:r}}]).run(["$templateCache",function(e){e.put("components/fun-stuff-picker/input-extension-search-list.html",a),e.put(i.InputExtensionCreateDropdown.createDropdownTempalte,s)}])},2605:function(e,t){e.exports='<div class="search-list-input-extension-popover input-extension-popover top normal-space" data-tid="composeExtensionSearchList" acc-role="tab-handler-input-extension-search-list" ng-click="searchCtrl.onSearchListClicked()">\n  <div ng-if="!searchCtrl.viewModel.useExternalInputSource">\n      <div class="branded-search-box">\n          <div class="image-container" ng-style="{ \'background\': searchCtrl.viewModel.inputExtensionItem.accentColor }">\n            <ng-include src="::searchCtrl.viewModel.inputExtensionItem.imageUrl" ng-if="::searchCtrl.utilityService.useNgIncludeForIcon(searchCtrl.viewModel.inputExtensionItem.imageUrl)"></ng-include>\n            <img ng-src="{{::searchCtrl.viewModel.inputExtensionItem.imageUrl}}" ng-if="::!searchCtrl.utilityService.useNgIncludeForIcon(searchCtrl.viewModel.inputExtensionItem.imageUrl)"/>\n          </div>\n          <span class="input-extensions-branded-search-name" ng-bind="searchCtrl.viewModel.inputExtensionItem.name"></span>\n          <button ng-if="ctrl.isCreateMenuReady" type="button" title="{{::$root.resources.strings.inputExtension_action_tooltip|translate}}" class="ts-sym app-icons-fill-hover input-extensions-create-button" id="compose-extension-create-button" data-tid="composeExtensionCreateButton" ng-click="searchCtrl.onCreateCommandDropdown()" aria-haspopup="true" aria-label="{{::$root.resources.strings.inputExtension_create_more_commands |translate}}">\n            <ng-include src="\'svg/icons-add.html\'"></ng-include>\n          </button>\n        </div>\n\n        <div class="branded-search-input">\n          <input sanitized type="search" class="form-control input-extension-search-box ts-header-search" id="compose-search-list-input" ng-model="searchCtrl.viewModel.searchText" ng-model-options="{ updateOn: \'keyup\'}" translate-once="{{::$root.resources.strings.funStuffPicker_search_placeholderText}}" set-focus="searchCtrl.isTooltipVisible" ng-keypress="searchCtrl.handleSearchKeyPress($event)" data-tid="composeSearchListInput" ng-change="searchCtrl.searchTextChanged()" placeholder="{{searchCtrl.viewModel.currentParameterDesscription}}"/>\n          <ng-include src="\'svg/icons-search.html\'"></ng-include>\n        </div>\n        <input-extensions-command-tab ng-if="searchCtrl.viewModels.length > 1" selected-command-id="searchCtrl.selectedCommandId" selected-item="searchCtrl.selectedItem" on-command-tab-clicked-callback="searchCtrl.onCommandTabClicked($id)"></input-extensions-command-tab>\n  </div>\n\n  <div class="input-extension-scroll-search-results" ng-if="!searchCtrl.viewModel.openUrl && !searchCtrl.viewModel.responseText && searchCtrl.viewModel.responseErrorCode === 0" easy-scrollbar=".scroll-wrapper" on-edge-callback="searchCtrl.loadMore()" ng-class="{\'list-scroll-search-results-no-input-box\': searchCtrl.viewModel.useExternalInputSource}">\n    <div class="scroll-wrapper">\n      <div class="search-list-content" ng-if="searchCtrl.viewModel.searchText || searchCtrl.viewModel.initialRun" ng-switch on="searchCtrl.viewModel.layout">\n        <ul class="input-extension-tile search-list-list-tile" acc-role="sub-menu" ng-switch-when="list">\n          <li class="input-extension-item" ng-repeat="item in searchCtrl.viewModel.previewResults track by item.cardClientId" ng-class="{\'ts-selectedRow\': $index === searchCtrl.viewModel.currentIndex}" ng-mouseenter="searchCtrl.viewModel.hoverRow($index)" role="none">\n            <div class="left-rail-item left-rail-item-hover input-extension-search-pane compose-search-list-items" ng-click="searchCtrl.onItemClicked(item, ctrl.teamId); $hide(); $event.stopPropagation();" data-tid="composeSearchListItems" acc-role="sub-menu-item" track-click-silent="true">\n              <hero-card ng-if="!searchCtrl.viewModel.isWorkflowApp" card="item" show-border="true"></hero-card>\n              <mini-adaptive-card ng-if="searchCtrl.viewModel.isWorkflowApp" card="item" show-border="true"></mini-adaptive-card>\n            </div>\n          </li>\n        </ul>\n        <ul class="input-extension-tile search-list-grid-tile" acc-role="listgrid-horizontal" ng-switch-when="grid">\n          <li ng-repeat="item in searchCtrl.viewModel.previewResults track by item.cardClientId" ng-class="{\'ts-selectedRow\': $index === searchCtrl.viewModel.currentIndex}" ng-mouseenter="searchCtrl.viewModel.hoverRow($index)" ng-click="searchCtrl.onItemClicked(item, ctrl.teamId); $hide(); $event.stopPropagation();" track-click-silent="true">\n              <div acc-role="listgrid-item" data-tid="composeSearchListItems" aria-label="{{::item.arialLabelTitle}}" tabindex="-1">\n                <img ng-src="{{::item.heroImageSrc}}" alt="{{::item.title}}" title="{{::item.title}}"/>\n              </div>\n            </li>\n          </ul>\n          <div ng-if="searchCtrl.viewModel.displayNoResults" class="center-container" translate-once="{{::$root.resources.strings.funStuffPicker_search_noResults}}">\n          </div>\n        </div>\n      </div>\n    <div ng-if="searchCtrl.viewModel.isLoading" class="center-progress-spinner">\n      <div ng-class="{ \'bottom-container\': searchCtrl.viewModel.isLoadingMore,\n          \'center-container\': !searchCtrl.viewModel.isLoadingMore,\n          \'extra-padding-multi-command\': searchCtrl.viewModels.length > 1}">\n        <busy-animation size="medium"></busy-animation>\n        <p ng-if="!searchCtrl.noInitialRunLoading" translate-once="{{::$root.resources.strings.inputExtension_initialRun_progress}}" translate-values="{appName: searchCtrl.viewModel.inputExtensionItem.name}"></p>\n      </div>\n    </div>\n    <div ng-if="searchCtrl.viewModel.showDescription" class="bottom-container">\n      <span>{{searchCtrl.viewModel.currentCommandDesscription}}</span>\n    </div>\n  </div>\n\n  <div ng-if="!searchCtrl.viewModel.openUrl && searchCtrl.viewModel.responseText && searchCtrl.viewModel.responseErrorCode === 0" class="center-container">\n    {{searchCtrl.viewModel.responseText}}\n  </div>\n\n  <div ng-if="searchCtrl.viewModel.responseErrorCode === 1" class="center-container">\n    <span class="link-text" translate-with-html-params translate-id="inputExtension_invoke_failure_bots" translate-values=\'{"linkText": "<br/> <a tabindex=\\"1\\" id=\\"compose-extension-retry\\" data-tid=\\"composeExtensionRetry\\" set-focus=\\"true\\" ng-click=\\"searchCtrl.viewModel.retryExecuteCommand()\\" translate-once=\\"{{searchCtrl.resources.strings.inputExtension_retry_link_text}}\\" title=\\"{{searchCtrl.viewModel.retryErrorLabel}}\\" aria-label=\\"{{searchCtrl.viewModel.retryErrorLabel}}\\"></a>"}\'></span>\n  </div>\n\n  <div ng-if="searchCtrl.viewModel.responseErrorCode === 3" class="center-container">\n    <span class="link-text" translate-with-html-params translate-id="inputExtension_invoke_failure_nonbots" translate-values=\'{"linkText": "<br/> <a tabindex=\\"1\\" id=\\"compose-extension-retry\\" data-tid=\\"composeExtensionRetry\\" set-focus=\\"true\\" ng-click=\\"searchCtrl.viewModel.retryExecuteCommand()\\" translate-once=\\"{{searchCtrl.resources.strings.inputExtension_retry_link_text}}\\" title=\\"{{searchCtrl.viewModel.retryErrorLabel}}\\" aria-label=\\"{{searchCtrl.viewModel.retryErrorLabel}}\\"></a>"}\'></span>\n  </div>\n\n  <div ng-if="searchCtrl.viewModel.openUrl && searchCtrl.viewModel.responseErrorCode === 0" class="input-extension-openUrl">\n    <div class="input-extension-openUrl-title">\n      <img ng-if="searchCtrl.viewModel.useExternalInputSource" class="media-object" ng-style="{ \'background\': searchCtrl.viewModel.inputExtensionItem.accentColor }" ng-src="{{searchCtrl.viewModel.inputExtensionItem.imageUrl}}"/>\n      <div ng-class="{\'text-search\': searchCtrl.viewModel.useExternalInputSource}">\n        <span class="input-extension-openUrl-text app-max-2-lines-base">{{searchCtrl.viewModel.openUrlTitle}}</span>\n      </div>\n    </div>\n    <span class="input-extension-openUrl-text" ng-if="searchCtrl.viewModel.openUrlLinkAuthType || searchCtrl.viewModel.openUrlLinkSilentAuthType" translate-with-html-params translate-id="inputExtension_auth_description" translate-values=\'{"appName": "{{searchCtrl.viewModel.inputExtensionItem.name}}", "linkText": "<a tabindex=\\"1\\" id=\\"compose-extension-auth\\" data-tid=\\"composeExtensionAuth\\" set-focus=\\"true\\" ng-click=\\"searchCtrl.viewModel.launchWebFlow(searchCtrl.$scope, $event)\\" translate-once=\\"{{searchCtrl.resources.strings.inputExtension_auth_link_text}}\\" title=\\"{{::$root.resources.strings.inputExtension_auth_link_ariaLabel|translate}}\\" aria-label=\\"{{::$root.resources.strings.inputExtension_auth_link_ariaLabel|translate}}\\"></a>"}\'></span>\n    <span class="input-extension-openUrl-text" ng-if="!searchCtrl.viewModel.openUrlLinkAuthType && !searchCtrl.viewModel.openUrlLinkSilentAuthType" translate-with-html-params translate-id="inputExtension_config_description" translate-values=\'{"appName": "{{searchCtrl.viewModel.inputExtensionItem.name}}", "linkText": "<a tabindex=\\"1\\" id=\\"compose-extension-config\\" data-tid=\\"composeExtensionConfig\\" set-focus=\\"true\\" ng-click=\\"searchCtrl.viewModel.launchWebFlow(searchCtrl.$scope, $event)\\" translate-once=\\"{{searchCtrl.resources.strings.inputExtension_config_link_text}}\\" title=\\"{{::$root.resources.strings.inputExtension_config_link_ariaLabel|translate}}\\" aria-label=\\"{{::$root.resources.strings.inputExtension_config_link_ariaLabel|translate}}\\"></a>"}\'></span>\n    <span class="errorText input-extension-openUrl-text" ng-if="searchCtrl.viewModel.openUrlError" translate-once="{{::searchCtrl.resources.strings.inputExtension_auth_error}}"></span>\n  </div>\n</div>'},2606:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(2607);angular.module("teamspace.inputExtensionsFlyoutList",["focusOn"]).directive("inputExtensionsFlyoutList",[function(){return{restrict:"E",scope:{extensions:"=",selectorController:"=",isSuggested:"@?",listLayout:"@?"},templateUrl:"components/fun-stuff-picker/input-extensions-flyout-list.html"}}]).run(["$templateCache",function(e){e.put("components/fun-stuff-picker/input-extensions-flyout-list.html",i)}])},2607:function(e,t){e.exports='<ul class="input-extension-tile" ng-class="{\'input-extensions-flyout-list-v2\': selectorController.enableMessagingExtensionFlyoutV2}" acc-role="listgrid-horizontal-and-vertical" aria-label="{{::selectorController.announceCategory(isSuggested)}}" role="listbox">\n  <li class="input-extension-item" ng-if="!selectorController.enableMessagingExtensionFlyoutV2" ng-repeat="item in extensions track by $index">\n\n    <a class="left-rail-item left-rail-item-hover input-extension-search-pane" acc-role="menu-item focus-default tab-handler-input-extension-selector-list" aria-label="{{isSuggested ? ($root.resources.strings.inputExtension_suggested_section_title|translate) + \' \' : \'\'}}{{item.name + \' \' + item.description + \' \' + ($root.resources.strings.inputExtension_additional_info|translate)}}" data-tid="composeItems" ng-click="selectorController.onInputExtensionClicked($event, item, false)" ts-right-click="selectorController.contextMenuHandler($event, this, item)" ng-keydown="selectorController.handleMenuKeyDown($event, this, item)" track-click-silent="true" do-not-decorate-click-for-acc>\n      <div class="image-container" ng-style="{ \'background\': item.accentColor }">\n        <ng-include src="item.imageUrl" ng-if="::selectorController.utilityService.useNgIncludeForIcon(item.imageUrl)"></ng-include>\n        <img alt="{{::($root.resources.strings.extensibility_app_icon_alt|translate:{appName:item.name})}}" fallback-src="{{::selectorController.appFallbackIcon}}" ng-src="{{item.imageUrl}}" ng-if="::!selectorController.utilityService.useNgIncludeForIcon(item.imageUrl)"/>\n      </div>\n      <div ng-class="{\'text-search\': true, \'featured-text\': item.isFeatured}">\n        <span class="input-extension-name" title="{{item.name}}">{{item.name}}\n          <new-tab-badge ng-if="item.isNewToUser"></new-tab-badge>\n        </span>\n        <span class="input-extension-description" title="{{item.description}}">{{item.description}}</span>\n      </div>\n      <input-extensions-settings ng-if="selectorController.enablePinningComposeExtensions" skype-conversation-id="selectorController.skypeConversationId" input-extension-item="item" team-id="selectorController.teamId" class="show-context-menu-on-hover"></input-extensions-settings>\n    </a>\n  </li>\n\n  <li class="input-extension-item" ng-if="selectorController.enableMessagingExtensionFlyoutV2 && listLayout" ng-repeat="item in extensions track by $index">\n\n    <a class="left-rail-item left-rail-item-hover input-extension-search-pane" ng-class="{\'ts-selectedRow\': selectorController.searchResultFocusIndex === $index}" acc-role="menu-item focus-default tab-handler-input-extension-selector-list" aria-label="{{isSuggested ? ($root.resources.strings.inputExtension_suggested_section_title|translate) + \' \' : \'\'}}{{item.name + \' \' + item.description + \' \' + ($root.resources.strings.inputExtension_additional_info|translate)}}" data-tid="composeItems" ng-click="selectorController.onInputExtensionClicked($event, item, false, false, true)" ng-keydown="selectorController.handleMenuKeyDown($event, this, item)" track-outcome="{{::$root.trackConstants.trackOutcome.nav}}" track-scenario="{{::$root.trackConstants.trackScenario.openApp}}" track-scenario-type="{{::$root.trackConstants.trackScenarioType.nav}}" track-name="{{::$root.trackConstants.trackModuleName.composeExtensionFlyout}}" track-type="{{::$root.trackConstants.trackType.nav}}" track-summary="{{::item.name}}" track-data="{{selectorController.getSearchAppTelemetryData(item, $index)}}" do-not-decorate-click-for-acc>\n      <div class="image-container" ng-style="{ \'background\': item.accentColor }">\n        <ng-include src="item.imageUrl" ng-if="::selectorController.utilityService.useNgIncludeForIcon(item.imageUrl)"></ng-include>\n        <img alt="{{::($root.resources.strings.extensibility_app_icon_alt|translate:{appName:item.name})}}" fallback-src="{{::selectorController.appFallbackIcon}}" ng-src="{{item.imageUrl}}" ng-if="::!selectorController.utilityService.useNgIncludeForIcon(item.imageUrl)"/>\n      </div>\n      <div class="text-search">\n        <span class="input-extension-name" title="{{item.name}}">{{item.name}}\n        </span>\n        <span class="input-extension-description" title="{{item.description}}">{{item.description}}</span>\n      </div>\n    </a>\n  </li>\n\n  <li class="input-extension-item grid-item" ng-if="selectorController.enableMessagingExtensionFlyoutV2 && !listLayout" ng-repeat="item in extensions track by $index" ng-class="{\'input-extensions-selector-v2\': selectorController.enableMessagingExtensionFlyoutV2, \'input-extensions-inline-pinned-item\': item.isFavorite}" ng-click="selectorController.onInputExtensionClicked($event, item, false, isSuggested)" acc-role="listgrid-item" role="option" aria-label="{{($root.resources.strings.extensibility_aria_label_more_options|translate:{appName:item.name})}}" ts-right-click="selectorController.contextMenuHandler($event, this, item)">\n    <div class="app-grid-item-container">\n      <div class="app-icon" title="{{::item.name}}" ng-style="{ \'background\': item.accentColor }">\n        <div class="new-app-flyout-badge" ng-if="item.isNewToUser">\n          {{::$root.resources.strings.tabs_newBadge|translate}}\n        </div>\n        <ng-include src="item.imageUrl" ng-if="::selectorController.utilityService.useNgIncludeForIcon(item.imageUrl)"></ng-include>\n        <img role="img" alt="{{::($root.resources.strings.extensibility_app_icon_alt|translate:{appName:item.name})}}" aria-label="{{::($root.resources.strings.extensibility_app_icon_alt|translate:{appName:item.name})}}" fallback-src="{{::selectorController.appFallbackIcon}}" ng-src="{{item.imageUrl}}"/>\n      </div>\n      <div dir="auto" id="apps-flyout-name-{{::item.name}}" class="app-name">\n        {{item.name}}\n      </div>\n    </div>\n  </li>\n</ul>'},2608:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(2609),a=n(2610),o=n(23),s=function(){return function(e,t){this.title=t,this.id=e,this.isSelected=!1,this.isOverflow=!1}}();t.InputExtensionCommand=s;var r=3,c=function(){function e(e,t,n,i,a,o,c,l,p){var m=this;this.$scope=e,this.constants=t,this.utilityService=n,this.loggingService=i,this.eventingService=a,this.resources=o,this.$popover=c,this.$timeout=l,this.analyticsService=p,this.visibleCommands=[],this.overflowCommands=[],this.commands=[],this.commands=_.map(_.filter(this.selectedItem.commands,function(e){return e.type!==t.inputExtensionConstants.createCommandType}),function(e){return new s(e.id,e.title)});var u;_.each(this.commands,function(e,t){e.isSelected=e.id===m.selectedCommandId,e.isSelected&&(u=e),e.isOverflow=t>=r}),this.recalculateTabs(u),a.$on(e,t.events.inputExtension.dismissContextMenu,function(e,t){m.dismissPopover()})}return e.$inject=["$scope","constants","utilityService","loggingService","eventingService","resources","$popover","$timeout","analyticsService"],e.prototype.onCommandTabClicked=function(e){if(this.selectedCommandId!==e.id){_.find(this.commands,function(e){return e.isSelected}).isSelected=!1,this.selectedCommandId=e.id,e.isSelected=!0,this.recalculateTabs(e),this.$scope.onCommandTabClickedCallback({$id:e.id}),this.dismissPopover();var t=this.selectedItem.externalId?"<retracted_sideloaded_or_custombot>":this.selectedItem.name;o.ComposeExtensionTelemetryHelper.logTelemetryForInputExtensionQueryCommandClickAction(this.loggingService,this.analyticsService,this.selectedItem.appId,t,e.title,teamspace.components.PanelActionScenario.composeExtentionSwitchCommand,teamspace.components.PanelModuleType.commanding,this.selectedItem.botId)}},e.prototype.showOverflowCommands=function(e){var t=this,n=$(e.currentTarget);n.hasClass("ts-tabs-chevron")&&(n=n.parent()),this.popover||(this.popover=this.$popover(n,{animation:"",contentTemplate:"components/fun-stuff-picker/input-extensions-command-tab-dropdown.html",container:"body",customClass:"input-extensions-command-overflow",target:n,trigger:"manual",placement:"bottom",scope:this.$scope,autoClose:!0,prefixEvent:"input-extension-command-tab"})),this.$timeout(function(){t.popover.toggle()},0,!1)},e.prototype.dismissPopover=function(){this.popover&&this.popover.hide()},e.prototype.handleMenuKeyDown=function(e){e.stopPropagation(),e.which===this.constants.keyCodes.escape&&this.dismissPopover()},e.prototype.recalculateTabs=function(e){if(this.updateVisiableAndOverflowCommands(),e.isOverflow){var t=this.visibleCommands[this.visibleCommands.length-1];this.visibleCommands.splice(this.visibleCommands.length-1,1,e),_.remove(this.overflowCommands,function(t){return t.id===e.id}),this.overflowCommands.splice(0,0,t)}},e.prototype.updateVisiableAndOverflowCommands=function(){this.commands.length>r?(this.visibleCommands=this.commands.slice(0,r),this.overflowCommands=this.commands.slice(r,this.commands.length)):(this.visibleCommands=this.commands,this.overflowCommands=[])},e}();t.InputExtensionsCommandTabController=c,angular.module("teamspace.inputExtensionsCommandTab",["focusOn"]).directive("inputExtensionsCommandTab",[function(){return{restrict:"E",scope:{onCommandTabClickedCallback:"&"},bindToController:{selectedItem:"=",selectedCommandId:"="},controllerAs:"ctrl",templateUrl:"components/fun-stuff-picker/input-extensions-command-tab.html",controller:c}}]).run(["$templateCache",function(e){e.put("components/fun-stuff-picker/input-extensions-command-tab.html",i),e.put("components/fun-stuff-picker/input-extensions-command-tab-dropdown.html",a)}])},2609:function(e,t){e.exports='<ul class="input-extension-command-tab" acc-role="tab-list">\n  <li class="input-extension-command-tab-item" title="{{command.title}}" ng-repeat="command in ctrl.visibleCommands track by $index" role="tab">\n    <button class="btn btn-default compose-extension-command-tab" data-tid="composeExtensionCommandTab" ng-class="{\'tabs-selected\': command.id === ctrl.selectedCommandId}" ng-bind="command.title" ng-click="ctrl.onCommandTabClicked(command)" acc-role="tab"></button>\n  </li>\n  <li class="input-extension-command-tab-item input-extension-command-tab-overflow" ng-if="ctrl.overflowCommands.length > 0" aria-label="{{ctrl.overflowCommands.length == 1 ? ($root.resources.strings.channel_moreTabsButton_singular_aria|translate:{num:ctrl.overflowCommands.length}) : ($root.resources.strings.channel_moreTabsButton_plural_aria|translate:{num:ctrl.overflowCommands.length}) }}" role="tab">\n    <button class="btn btn-default btn-overflow compose-extension-command-tab" acc-role="tab" ng-bind="ctrl.overflowCommands.length == 1 ? ($root.resources.strings.channel_moreTabsButton_singular|translate:{num:ctrl.overflowCommands.length}) : ($root.resources.strings.channel_moreTabsButton_plural|translate:{num:ctrl.overflowCommands.length})" ng-click="ctrl.showOverflowCommands($event)" title="{{ctrl.overflowCommands.length == 1 ? ($root.resources.strings.channel_moreTabsButton_singular|translate:{num:ctrl.overflowCommands.length}) : ($root.resources.strings.channel_moreTabsButton_plural|translate:{num:ctrl.overflowCommands.length}) }}">\n    </button>\n    <button type="button" class="ts-sym ts-svg-small icons-more app-icons-fill-hover" ng-click="ctrl.showOverflowCommands($event)" title="{{ctrl.overflowCommands.length == 1 ? ($root.resources.strings.channel_moreTabsButton_singular|translate:{num:ctrl.overflowCommands.length}) : ($root.resources.strings.channel_moreTabsButton_plural|translate:{num:ctrl.overflowCommands.length}) }}">\n      <ng-include src="\'svg/icons-chevron-right.html\'"></ng-include>\n    </button>\n  </li>\n</ul>'},2610:function(e,t){e.exports='<div class="input-extensions-command-overflow-popover app-default-menu" role="application" ng-keydown="ctrl.handleMenuKeyDown($event);">\n  <ul acc-role="sub-menu" class="command-list left-rail-item">\n    <li class="command-item actions-menu-border" ng-repeat="command in ctrl.overflowCommands" title="{{command.title}}" acc-role="sub-menu-item focus-default">\n      <button acc-focus-default class="ts-sym has-icon actions-menu-border" ng-click="ctrl.onCommandTabClicked(command);$event.stopPropagation();">\n        <span class="popover-label">{{command.title}}</span>\n      </button>\n    </li>\n  </ul>\n</div>'},2611:function(e,t,n){"use strict";var i=this&&this.__extends||function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}();Object.defineProperty(t,"__esModule",{value:!0});var a,o=n(324),s=n(2612);!function(e){e[e.Emoji=1]="Emoji",e[e.Emoticon=2]="Emoticon"}(a=t.EmoticonAssetType||(t.EmoticonAssetType={}));var r=function(e){function t(t,n,i,a,o,s,r,c,l,p,m,u,d,h,g,f,k,v,y,S,x,C,b){var M=e.call(this,t,n,i,a,o,s,c,l,r,p,m,g,f,v,y,S,h,d,b,"emojiPicker","emojiPickerButton",C)||this;return M.$scope=t,M.ariaLiveService=n,M.resources=i,M.constants=a,M.settingsService=o,M.eventingService=s,M.emojiEmoticonCategoryService=r,M.commandsService=c,M.loggingService=l,M.channelService=p,M.tenantSettingsStore=m,M.conversationsService=u,M.utilityService=d,M.tooltipService=h,M.sxConfig=g,M.$translate=f,M.$timeout=k,M.$q=v,M.$popover=y,M.$element=S,M.$filter=x,M.$ocLazyLoad=C,M.channelMembershipPropertiesService=b,M.categoryMaxIconsEmoji=[],M.searchMaxIconsEmoji={},M.popoverTemplateUrl="components/fun-stuff-picker/input-extension-emoji.html",M.categoriesEmoji=[],M}return i(t,e),t.$inject=["$scope","ariaLiveService","resources","constants","settingsService","eventingService","emojiEmoticonCategoryService","commandsService","loggingService","channelService","tenantSettingsStore","conversationsService","utilityService","tooltipService","sxConfig","$translate","$timeout","$q","$popover","$element","$filter","$ocLazyLoad","channelMembershipPropertiesService"],t.prototype.initControl=function(){e.prototype.initControl.call(this)},t.prototype.isCategoryEnabled=function(e){return"Emoticon"===e||"Emoji"===e},t.prototype.isTabEnabled=function(e){return"Emoji"===e},t.prototype.onSearchTextChanged=function(){if(this.emojiAllDataSet&&this.emojiAllDataSet.categoryData){this.searchDataMap.Emoji=this.$filter("filter")(this.emojiAllDataSet.categoryData,this.searchTerm);var e=Math.min(this.searchDataMap.Emoji.length,this.searchMaxIconsEmoji.length);this.announceSearchResultsChanged(e)}},t.prototype.customLoadPopoverAssets=function(){var e=this;if(this.setRefocusCallback&&this.setRefocusCallback({data:!1}),this.getCategoryTabData("Emoji")){this.loadEmojis();for(var t=void 0,n=this,i=0;i<this.categoriesEmoji.length;i++)!function(i){if("emoticons"===n.categoriesEmoji[i].id){var a=_.find(n.categoryDataMap.Emoji,function(t){return t.categoryId===e.categoriesEmoji[i].id});t={length:a&&a.categoryData?a.categoryData.length:n.searchMaxIcons.Emoticon,displayMoreLabel:!1}}else t={length:n.searchMaxIcons.Emoji,displayMoreLabel:!0};n.categoryMaxIconsEmoji[n.categoriesEmoji[i].id]=t}(i);this.searchMaxIconsEmoji=t}},t.prototype.loadEmojis=function(){if(this.categoryDataMap&&this.categoryDataMap.Emoji&&jQuery.isEmptyObject(this.categoryDataMap.Emoji)){var e=[],t=this.emojiEmoticonCategoryService.getCategoryKeys(a.Emoticon),n=this.emojiEmoticonCategoryService.getCategoryTabOrder();if(n&&n.length>0)for(var i=this,o=0;o<n.length;o++)!function(a){if(e.indexOf(n[a].id)>-1||t.indexOf(n[a].id)>-1){var o=i.$translate.instant(i.resources.strings[n[a].name]);o=o||"defaultTab",_.find(i.categoriesEmoji,function(e){return e&&e.id===n[a].id})||i.categoriesEmoji.push({id:n[a].id,name:o})}}(o);else this.categoriesEmoji=e,this.categoriesEmoji.push(t);for(var s=this.getCategoryTabData("Emoji"),r=s.icon,c=s.name,l=[],p=[],o=0;o<this.categoriesEmoji.length;o++){var m=[];if("emoticons"===this.categoriesEmoji[o].id){m=this.emojiEmoticonCategoryService.getCategoryData(a.Emoticon,this.categoriesEmoji[o].id),p.push.apply(p,m);var u={categoryData:m,categoryName:this.categoriesEmoji[o].name?this.categoriesEmoji[o].name:this.categoriesEmoji[o].id,categoryId:this.categoriesEmoji[o].id};l.push(u)}}l.headerIcon=r,l.headerName=c,this.categoryDataMap.Emoji=l,this.emojiAllDataSet={categoryData:p}}},t.prototype.onEmojiClicked=function(e,t){var n=this.constants.telemetry.funStuff.emoji.inputMethod.emojiPicker;this.setRefocusCallback&&(this.setRefocusCallback({data:!0}),this.shouldRefocus=!0),t===a.Emoji?this.eventingService.$emit(this.constants.events.funStuff.add,{type:this.constants.events.funStuff.type.emoji,shortCode:e,description:e,handler:this.newMessageControllerObjId,method:n}):t===a.Emoticon&&this.eventingService.$emit(this.constants.events.funStuff.add,{type:this.constants.events.funStuff.type.emoticon,shortCode:e,description:e,handler:this.newMessageControllerObjId,method:n})},t.prototype.onDisplayMoreClickCategory=function(e){e&&(this.searchMaxIconsEmoji.displayMoreLabel=!1,this.searchMaxIconsEmoji.length=e)},t.prototype.onDisplayMoreClickEmoji=function(e,t){e&&angular.isDefined(t)&&(this.categoryMaxIconsEmoji[e].displayMoreLabel=!1,this.categoryMaxIconsEmoji[e].length=t)},t}(teamspace.components.BaseInputExtension);t.EmojiInputExtensionController=r,angular.module("teamspace.emojiInputExtension",["focusOn"]).directive("inputExtensionEmoji",[function(){return{restrict:"E",scope:{ctrlid:"@"},bindToController:{forceTooltipBelow:"@",isDisabled:"=?",messageType:"=?",avoidScreenEdge:"<?",skypeConversationId:"=?",teamName:"=?",setRefocusCallback:"&"},controllerAs:"emojiPicker",templateUrl:"components/fun-stuff-picker/input-extension-emoji-button.html",controller:r}}]).run(["$templateCache",function(e){e.put("components/fun-stuff-picker/input-extension-emoji-button.html",o),e.put("components/fun-stuff-picker/input-extension-emoji.html",s)}])},2612:function(e,t){e.exports='<div class="popover emoji-input-extension-popover input-extension-popover top" data-tid="emojiPopOverDialog">\n  <div class="loading" ng-if="emojiPicker.loading">\n    <div translate-once="{{::$root.resources.strings.funStuffPicker_loadingDataLabel}}"></div>\n    <busy-animation></busy-animation>\n  </div>\n  <div class="fun-stuff-content" data-tid="emojiFunStuffContent" ng-if="!emojiPicker.loading" ng-mousedown="emojiPicker.clearBanner()" acc-role="dialog">\n    \x3c!-- Emoji Pane --\x3e\n    <div>\n      <input sanitized type="search" data-tid="emojiSearchBox" ng-model="emojiPicker.searchTerm" class="form-control input-extension-search-box" placeholder="{{::emojiPicker.searchPlaceholder}}" set-focus="emojiPicker.isTooltipVisible" ng-change="emojiPicker.searchTextChanged()">\n      <ng-include src="\'svg/icons-search.html\'"></ng-include>\n      <div class="input-extension-scroll-search-results" simple-scrollbar>\n        <div>\n          \x3c!-- Search Emoji Pane --\x3e\n          <div class="search-emoji-content" ng-if="emojiPicker.searchTerm && emojiPicker.searchDataMap[\'Emoji\'].length >= 1">\n            <div class="label-container">\n              <div class="text-label" translate-once="{{::$root.resources.strings.funStuffPicker_emojiLabelUppercase}}"></div>\n              <button type="button" class="btn btn-link btn-sm view-more-label" ng-click="emojiPicker.onDisplayMoreClickCategory(emojiPicker.searchDataMap[\'Emoji\'].length)" ng-if="emojiPicker.searchMaxIconsEmoji.displayMoreLabel && emojiPicker.searchDataMap[\'Emoji\'].length > emojiPicker.searchMaxIconsEmoji.length" translate-once="{{::$root.resources.strings.funStuffPicker_viewAllLabel}}"></button>\n            </div>\n            <ul acc-role="listgrid-horizontal-and-vertical" col-count="6" role="menu" class="input-extension-tile">\n              <li class="input-extension-item" role="none" ng-repeat="icon in emojiPicker.searchDataMap[\'Emoji\'] | limitTo: emojiPicker.searchMaxIconsEmoji.length track by icon.unicode">\n                <a class="link" acc-role="listgrid-item" ng-click="emojiPicker.onEmojiClicked(icon.shortname, icon.type); $hide()" role="menuitem" data-shortname="{{::icon.shortname}}" index="{{$index}}" title="{{::$root.resources.strings.funStuffPicker_emojiItemAriaLabel | translate: { name: icon.name, shortname: icon.shortname, newLine: \'&#13;\' } }}" tabindex="{{$first?0:-1}}" track-outcome="{{::$root.trackConstants.trackOutcome.select}}" track-scenario="{{::$root.trackConstants.trackScenario.funSelectItem}}" track-scenario-type="{{::$root.trackConstants.trackScenarioType.composeMsg}}" track-name="{{::$root.trackConstants.trackModuleName.funItem}}" track-type="{{::$root.trackConstants.trackType.fun}}" track-summary="{{::icon.name}}" track-state="Emoji">\n                   <span class="{{::icon.className}}">\n                    <span class="{{::icon.classNameAnim}}"><span class="zoetrope"></span></span>\n                  </span>\n                </a>\n              </li>\n            </ul>\n          </div>\n          \x3c!-- All Emoji Data --\x3e\n          <div class="recent-content" ng-if="!emojiPicker.searchTerm">\n            <div ng-repeat="dataSet in ::emojiPicker.categoryDataMap[\'Emoji\'] track by $index">\n              <ul acc-role="listgrid-horizontal-and-vertical" col-count="6" role="menu" class="input-extension-tile">\n                <li class="input-extension-item" role="none" ng-repeat="icon in dataSet.categoryData | limitTo: emojiPicker.categoryMaxIconsEmoji[dataSet.categoryId].length track by $index ">\n                  <a class="link" acc-role="listgrid-item" role="menuitem" ng-click="emojiPicker.onEmojiClicked(icon.shortname, icon.type); $hide()" data-shortname="{{::icon.shortname}}" index="{{$index}}" title="{{::$root.resources.strings.funStuffPicker_emojiItemAriaLabel | translate: { name: icon.name, shortname: icon.shortname, newLine: \'&#13;\' } }}" tabindex="{{$first?0:-1}}" track-outcome="{{::$root.trackConstants.trackOutcome.select}}" track-scenario="{{::$root.trackConstants.trackScenario.funSelectItem}}" track-scenario-type="{{::$root.trackConstants.trackScenarioType.composeMsg}}" track-name="{{::$root.trackConstants.trackModuleName.funItem}}" track-type="{{::$root.trackConstants.trackType.fun}}" track-summary="{{::icon.name}}" track-state="Emoji">\n                    <span class="{{::icon.className}}">\n                      <span class="{{::icon.classNameAnim}}"><span class="zoetrope"></span></span>\n                    </span>\n                  </a>\n                </li>\n              </ul>\n            </div>\n          </div>\n          <div ng-if="emojiPicker.searchTerm && emojiPicker.searchDataMap[\'Emoji\'].length == 0" class="center-container" translate-once="{{::$root.resources.strings.funStuffPicker_search_noResults}}">\n          </div>\n        </div>\n      </div>\n    </div>\n    \x3c!-- End Emoji Pane --\x3e\n  </div>\n</div>'},2613:function(e,t,n){"use strict";var i=this&&this.__extends||function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}();Object.defineProperty(t,"__esModule",{value:!0});var a=n(2614),o=n(2615),s=function(e){function t(t,n,i,a,o,s,r,c,l,p,m,u,d,h,g,f,k,v,y,S,x,C,b,M,E,T,$){var w=e.call(this,t,n,i,a,s,r,l,p,c,m,u,f,k,v,y,S,d,h,C,"inputExtensionGiphy","inputExtensionGiphyPickerButton",b)||this;return w.$scope=t,w.ariaLiveService=n,w.resources=i,w.constants=a,w.$sce=o,w.settingsService=s,w.eventingService=r,w.emojiEmoticonCategoryService=c,w.commandsService=l,w.loggingService=p,w.channelService=m,w.tenantSettingsStore=u,w.tooltipService=d,w.utilityService=h,w.localizationService=g,w.sxConfig=f,w.$translate=k,w.$q=v,w.$popover=y,w.$element=S,w.channelConversationAdapterService=x,w.channelMembershipPropertiesService=C,w.$ocLazyLoad=b,w.channelSettingsService=M,w.connectedExperiencesService=E,w.platformDetectService=T,w.sharedChannelsMessagingPolicySettingsStore=$,w.giphyCopyrightTemplate="components/fun-stuff-picker/giphy-copyright-label.html",w.waitForData=!1,w.isPopularGiphyLoaded=!1,w.createGiphySettingsUpdateSubscription(),w.initGiphySettings(),w.debouncedGiphySearch=_.debounce(w.loadSearchGiphys.bind(w),250),w.popoverTemplateUrl="components/fun-stuff-picker/input-extension-giphy.html",t.$on("$destroy",function(){w.giphyRatingUpdateSubscription&&M.unsubscribe(w.giphyRatingUpdateSubscription)}),w.locale=g.getLocale(),w}return i(t,e),t.$inject=["$scope","ariaLiveService","resources","constants","$sce","settingsService","eventingService","emojiEmoticonCategoryService","commandsService","loggingService","channelService","tenantSettingsStore","tooltipService","utilityService","localizationService","sxConfig","$translate","$q","$popover","$element","channelConversationAdapterService","channelMembershipPropertiesService","$ocLazyLoad","channelSettingsService","connectedExperiencesService","platformDetectService","sharedChannelsMessagingPolicySettingsStore"],t.prototype.createGiphySettingsUpdateSubscription=function(){var e=this;this.teamId&&this.skypeConversationId&&(this.giphyRatingUpdateSubscription&&this.channelSettingsService.unsubscribe(this.giphyRatingUpdateSubscription),this.giphyRatingUpdateSubscription=this.channelSettingsService.subscribe(function(t,n){n.has(e.skypeConversationId)&&e.giphyRating!==e.channelSettingsService.getGiphyRating(e.skypeConversationId)&&e.initGiphySettings()},this.constants.ChannelConversationAdapterService.Type_ChannelConversationsChanged,this.constants.events.channels.updatedChannelAdminSettings))},t.prototype.initGiphySettings=function(){if(this.giphyRating=1,this.enableGiphySetting=this.settingsService.valueAsBoolean(this.constants.settings.names.enableGiphySetting),this.settingGiphyRating=this.settingsService.valueAsBoolean(this.constants.settings.names.settingGiphyRating),this.enableGiphySetting){var e;if(this.isExternalTenantSharedChannel){var t=this.channelService.getChannelByObjectId(this.skypeConversationId);this.isExtensionEnabled=this.settingsService.valueAsBoolean(this.constants.settings.names.enableSharedChannelFetchPolicyFromMT)&&this.sharedChannelsMessagingPolicySettingsStore.getTenantSettingValue(t.hostTenantId,SkypeX.Services.MessagingPolicySettingsStorageKey.allowGiphy),e=SkypeX.Services.GiphyRatingMapping[this.sharedChannelsMessagingPolicySettingsStore.getTenantSettingValue(t.hostTenantId,SkypeX.Services.MessagingPolicySettingsStorageKey.giphyRatingType)]||0}else this.isExtensionEnabled=this.tenantSettingsStore.getSettingValue(SkypeX.Services.TenantSettingsStorageKey.funControl_isGiphyEnabled)||!1,this.isExtensionEnabled=this.isExtensionEnabled&&!this.connectedExperiencesService.isConnectedExperiencesDisabled(),e=SkypeX.Services.GiphyRatingMapping[this.tenantSettingsStore.getSettingValue(SkypeX.Services.TenantSettingsStorageKey.funControl_giphyRatingType)]||0;this.loggingService.event(this.constants.telemetry.funStuff.funsettings.tenant,{giphyEnabled:this.isExtensionEnabled,giphyRating:e}),this.giphyRating=e,this.logger.debug("Giphy rating set at {0} based on tenant settings",this.giphyRating);var n=this.channelSettingsService.getGiphyRating(this.skypeConversationId),i=this.channelSettingsService.isGiphyEnabled(this.skypeConversationId);void 0!==i&&(this.isExtensionEnabled=this.isExtensionEnabled&&i,this.isExtensionEnabled&&(this.logger.debug("channelGiphyRating={0}, tenantGiphySetting={1}",n,e),n<e&&(this.giphyRating=n)),this.loggingService.event(this.constants.telemetry.funStuff.funsettings.team,{giphyEnabled:i,giphyRating:n})),this.logger.debug("Giphy rating set at {0} after merging from team settings",this.giphyRating),this.loggingService.event(this.constants.telemetry.funStuff.funsettings.merged,{giphyEnabled:this.isExtensionEnabled,giphyRating:this.giphyRating}),this.hidePickerLeftRail=!this.isExtensionEnabled}},t.prototype.isTabEnabled=function(e){return"Popular"===e?this.isExtensionEnabled:"Giphy"===e&&this.isExtensionEnabled},t.prototype.onGiphyClicked=function(e){var t=this.constants.telemetry.funStuff.giphy.inputMethod.giphyPicker;this.setRefocusCallback&&(this.setRefocusCallback({data:!0}),this.shouldRefocus=!0);var n=this.gifImageAltText,i=e.fieldValues[0];i&&"title"===i.fieldName&&i.fieldValue&&(n=this.$translate.instant(this.resources.strings.funStuffPicker_giphyAltTitle,{title:i.fieldValue})),this.eventingService.$emit(this.constants.events.funStuff.add,{type:this.constants.events.funStuff.type.giphy,imageUrl:e.composeValue,description:n,handler:this.newMessageControllerObjId,method:t})},t.prototype.onSearchTextChanged=function(){this.debouncedGiphySearch(this.searchTerm)},t.prototype.customLoadPopoverAssets=function(){this.setRefocusCallback&&this.setRefocusCallback({data:!1}),this.loadPopularGiphys(),this.copyRightGiphyPopover||(this.copyRightGiphyPopover=this.$popover(this.$element,{animation:"",autoClose:!0,container:"body",contentTemplate:this.giphyCopyrightTemplate,trigger:"manual",placement:"auto top",target:this.$element,scope:this.$scope,customClass:"ts-popover ts-giphy-copyright-popover"}))},t.prototype.loadPopularGiphys=function(){var e=this;if(this.isPopularGiphyLoaded=!1,this.popularDataMap.Giphy={},this.isExtensionEnabled&&jQuery.isEmptyObject(this.popularDataMap.Giphy)){var t=this.getGiphyRating(),n=this.constants.funStuff.giphyAssets.limit;this.executeGiphyCommand("",t,n).then(function(t){t&&(e.popularDataMap.Giphy={popular:t}),e.isPopularGiphyLoaded=!0,e.platformDetectService.getBrowser()===e.constants.browser.firefox&&e.eventingService.$emit(e.constants.events.search.resizeSearchScroll)})}},t.prototype.loadSearchGiphys=function(e){var t=this;if(this.searchDataMap.Giphy={},this.waitForData=!0,this.isExtensionEnabled&&angular.isDefined(e)&&e.length>=0){var n=this.getGiphyRating(),i=this.constants.funStuff.giphyAssets.limit;this.executeGiphyCommand(e,n,i).then(function(e){t.searchDataMap.Giphy={data:e||[]},t.platformDetectService.getBrowser()===t.constants.browser.firefox&&t.eventingService.$emit(t.constants.events.search.resizeSearchScroll)}).finally(function(){t.waitForData=!1;var e=t.searchDataMap.Giphy.data.length;t.announceSearchResultsChanged(e,1,!0)})}},t.prototype.getGiphyRating=function(){return this.giphyRatingToString(this.giphyRating)},t.prototype.giphyRatingToString=function(e){switch(this.logger.debug("getting string for giphy rating:{0}",e),e){case 0:return this.constants.funStuff.giphyAssets.strictGiphyRating;case 1:return this.constants.funStuff.giphyAssets.gGiphyRating;case 2:default:return this.constants.funStuff.giphyAssets.pg13GiphyRating}},t.prototype.executeGiphyCommand=function(e,t,n){var i=this,a=this.$q.defer(),o=new Map;o.set("query",e),o.set("rating",t),o.set("limit",n),o.set("lang",this.language),this.logger.debug("Giphy settings query:{0}, rating:{1}, limit:{2}",o.get("query"),o.get("rating"),o.get("limit"));var s;return s=this.loggingService.newScenario(this.constants.scenarios.extensibility.funStuff.search),this.commandsService.executeCommand("com.microsoft.teamspace.inputextension.giphy","1.0",o).then(function(e){if(e.result&&e.result.length>0&&e.result[0].result){var t=e.result[0].result;teamspace.middletier.Commands.CommandResultComposeType[e.schema.composeType]===teamspace.middletier.Commands.CommandResultComposeType.Image&&t.forEach(function(e){return e.displayValue=e.fieldValues[2].fieldValue}),s.stop(),a.resolve(t)}else s.stop(),a.resolve(null)},function(e){i.hasDataError=!0,s.fail(),a.resolve(null)}),a.promise},t.prototype.onClickViewTerms=function(){this.copyRightGiphyPopover&&this.copyRightGiphyPopover.toggle()},t}(teamspace.components.BaseInputExtension);t.InputExtensionGiphy=s,angular.module("teamspace.inputExtensionGiphy",["focusOn","teamspace.localizationService","teamspace.connectedExperiencesService","skypeX.sharedChannelsMessagingPolicySettingsStore"]).directive("inputExtensionGiphy",[function(){return{restrict:"E",scope:{ctrlid:"@",onSaveCallback:"&"},bindToController:{forceTooltipBelow:"@",isDisabled:"=?",messageType:"=?",avoidScreenEdge:"<?",skypeConversationId:"=?",teamName:"=?",teamId:"=?",setRefocusCallback:"&"},controllerAs:"inputExtensionGiphy",templateUrl:"components/fun-stuff-picker/input-extension-giphy-button.html",controller:s}}]).run(["$templateCache",function(e){e.put("components/fun-stuff-picker/input-extension-giphy-button.html",a),e.put("components/fun-stuff-picker/input-extension-giphy.html",o)}])},2614:function(e,t){e.exports='\x3c!-- We need the high padding to prevent the popover overlaying on new-message area on non-expanded state.--\x3e\n<button type="button" role="button" acc-role="menu-item" prevent-override-role="true" class="ts-sym pull-right icons-emoji app-icons-fill-focus app-icons-fill-hover inset-border inset-border-round inset-border-themed shortcuts-funstuff" ng-disabled="inputExtensionGiphy.isDisabled" ng-click="inputExtensionGiphy.popoverMenuHandler($event, this)" data-prevent-refocus="{{ inputExtensionGiphy.shouldRefocus }}" track-outcome="{{::$root.trackConstants.trackOutcome.nav}}" track-scenario="{{::$root.trackConstants.trackScenario.composeOpenFunPicker}}" track-scenario-type="{{::$root.trackConstants.trackScenarioType.composeMsg}}" track-name="{{::$root.trackConstants.trackModuleName.funStuffPicker}}" track-type="{{::$root.trackConstants.trackType.compose}}" track-summary="Fun stuff picker" ts-event-class="{ \'tooltip.show\': \'selected\', \'tooltip.hide\': \'-selected\' }" data-tid="inputExtensionGiphyPickerButton" title="{{::$root.resources.strings.messages_composeBoxGiphyPicker|translate}}" aria-label="{{::$root.resources.strings.aria_messages_composeBoxGiphyPicker|translate}}">\n  <ng-include src="\'svg/icons-giphy.html\'"></ng-include>\n</button>\n'},2615:function(e,t){e.exports='<div class="popover giphy2-input-extension-popover input-extension-popover top" ng-class="{hidePickerLeftRail: inputExtensionGiphy.hidePickerLeftRail}" role="application">\n  <div class="loading" ng-if="inputExtensionGiphy.loading">\n    <div translate-once="{{::$root.resources.strings.funStuffPicker_loadingDataLabel}}"></div>\n    <busy-animation></busy-animation>\n  </div>\n  <div class="fun-stuff-content" data-tid="giphyFunStuffContent" ng-if="!inputExtensionGiphy.loading" ng-mousedown="inputExtensionGiphy.clearBanner()" acc-role="dialog">\n    <div>\n      <input sanitized type="search" ng-model="inputExtensionGiphy.searchTerm" class="form-control input-extension-search-box" placeholder="{{::inputExtensionGiphy.searchPlaceholder}}" set-focus="inputExtensionGiphy.isTooltipVisible" ng-change="inputExtensionGiphy.searchTextChanged()">\n      <ng-include class="search-icon" src="\'svg/icons-search.html\'"></ng-include>\n      <div class="input-extension-scroll-search-results" simple-scrollbar listen-to-custom-event="{{::inputExtensionGiphy.constants.events.search.resizeSearchScroll}}">\n        <div class="scroll-wrapper">\n          \x3c!-- Popular Giphy content --\x3e\n          <div class="recent-content" ng-if="!inputExtensionGiphy.searchTerm">\n            <div class="text-label-giphy-load" ng-if="!inputExtensionGiphy.searchTerm && !inputExtensionGiphy.popularDataMap[\'Giphy\'].popular && inputExtensionGiphy.isPopularGiphyLoaded">\n              <span translate-once="{{::$root.resources.strings.funStuffPicker_giphySomethingWentWrongLabel}}"></span>\n              <span>\n                <a href ng-click="inputExtensionGiphy.loadPopularGiphys()" translate-once="{{::$root.resources.strings.funStuffPicker_giphyClickHereLabel}}"></a>\n              </span>\n              <span translate-once="{{::$root.resources.strings.funStuffPicker_giphyReloadThisSectionLabel}}"></span>\n            </div>\n            <ul acc-role="listgrid-horizontal-and-vertical" col-count="3" role="menu" class="input-extension-tile">\n              <li class="input-extension-item" role="none" ng-if="!inputExtensionGiphy.searchTerm" ng-repeat="icon in inputExtensionGiphy.popularDataMap[\'Giphy\'].popular">\n                <a class="link" ng-click="inputExtensionGiphy.onGiphyClicked(icon); $hide()" acc-role="listgrid-item" title="{{icon.fieldValues[0] && icon.fieldValues[0].fieldValue}}" role="menuitem" tabindex="{{$first?0:-1}}" track-outcome="{{::$root.trackConstants.trackOutcome.select}}" track-scenario="{{::$root.trackConstants.trackScenario.funSelectItem}}" track-scenario-type="{{::$root.trackConstants.trackScenarioType.composeMsg}}" track-name="{{::$root.trackConstants.trackModuleName.funItem}}" track-type="{{::$root.trackConstants.trackType.fun}}" track-summary="{{icon.name}}" track-state="Giphy">\n                  <div class="placeholder">\n                    <div class="giphy-image ts-image" data-tid="giphyImage" style="background-image: url({{icon.displayValue}})">\n                      <img/>\n                    </div>\n                  </div>\n                </a>\n              </li>\n            </ul>\n          </div>\n          \x3c!-- Searched Giphy content --\x3e\n          <div ng-if="inputExtensionGiphy.waitForData" class="giphy-center-container">\n            <busy-animation size="medium" context="fun-stuff-picker"></busy-animation>\n          </div>\n          <div class="search-giphy-content" ng-if="!inputExtensionGiphy.waitForData && inputExtensionGiphy.searchTerm && inputExtensionGiphy.searchDataMap[\'Giphy\'].data.length >= 1">\n            <ul acc-role="listgrid-horizontal-and-vertical" col-count="3" role="menu" class="input-extension-tile">\n              <li class="input-extension-item" role="none" ng-if="inputExtensionGiphy.searchTerm" ng-repeat="icon in inputExtensionGiphy.searchDataMap[\'Giphy\'].data">\n                <a class="link" ng-click="inputExtensionGiphy.onGiphyClicked(icon); $hide()" acc-role="listgrid-item" role="menuitem" title="{{icon.fieldValues[0] && icon.fieldValues[0].fieldValue}}" tabindex="{{$first?0:-1}}" track-outcome="{{::$root.trackConstants.trackOutcome.select}}" track-scenario="{{::$root.trackConstants.trackScenario.funSelectItem}}" track-scenario-type="{{::$root.trackConstants.trackScenarioType.composeMsg}}" track-name="{{::$root.trackConstants.trackModuleName.funItem}}" track-type="{{::$root.trackConstants.trackType.fun}}" track-summary="{{icon.name}}" track-state="Giphy">\n                  <div class="placeholder">\n                    <div class="giphy-image ts-image" data-tid="giphyImage" style="background-image: url({{icon.displayValue}})">\n                      <img/>\n                    </div>\n                  </div>\n                </a>\n              </li>\n            </ul>\n          </div>\n          <div ng-if="!inputExtensionGiphy.waitForData && inputExtensionGiphy.searchTerm && inputExtensionGiphy.searchDataMap[\'Giphy\'].data.length == 0" class="center-container" translate-once="{{::$root.resources.strings.funStuffPicker_search_noResults}}">\n          </div>\n        </div>\n      </div>\n      <div class="text-label-copyright">\n        <span translate-once="{{::$root.resources.strings.funStuffPicker_poweredByGiphyLabel}}"></span>\n        <button type="button" class="view-terms-button" ng-click="inputExtensionGiphy.onClickViewTerms()" translate-once="{{::$root.resources.strings.funStuffPicker_giphyViewTermsLabel}}"></button>\n      </div>\n    </div>\n  </div>\n</div>'},2616:function(e,t,n){"use strict";var i=this&&this.__extends||function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}();Object.defineProperty(t,"__esModule",{value:!0});var a,o=n(2617),s=n(2618);!function(e){e[e.Stickers=1]="Stickers",e[e.Meme=2]="Meme"}(a=t.StickersCustomizableCaptionAssetType||(t.StickersCustomizableCaptionAssetType={}));var r=function(){return function(e,t){this.banner=e,this.errorType=t}}();t.StickersPickerErrorBanner=r;var c=function(e){function t(t,n,i,o,s,r,c,l,p,m,u,d,h,g,f,k,v,y,S,x,C,b,M,E,T,$,w){var I=e.call(this,t,n,i,o,s,r,p,m,c,u,d,v,y,x,C,b,f,k,T,"inputExtensionStickers","inputExtensionStickersButton",E)||this;I.$scope=t,I.ariaLiveService=n,I.resources=i,I.constants=o,I.settingsService=s,I.eventingService=r,I.emojiEmoticonCategoryService=c,I.stickerMemeCategoryService=l,I.commandsService=p,I.loggingService=m,I.channelService=u,I.tenantSettingsStore=d,I.filesAsyncMediaService=h,I.conversationsService=g,I.tooltipService=f,I.utilityService=k,I.sxConfig=v,I.$translate=y,I.$timeout=S,I.$q=x,I.$popover=C,I.$element=b,I.$filter=M,I.$ocLazyLoad=E,I.channelMembershipPropertiesService=T,I.channelSettingsService=$,I.sharedChannelsMessagingPolicySettingsStore=w,I.categoriesStickersMemeMap=[],I.stickerMemeAllDataSetMap=[],I.stickerCaptionTracked=!1,I.memeCaptionTracked=!1,I.enableAddToTeamMemeSettings=!1,I.teamMemeCategoryData=[],I.teamMemeMetadataExtension=[],I.allMemes=[],I.showViewAllLink=!1;var _=s.getStaticsUri();return I.templateAssetPathTemplate=_+"/evergreen-assets/"+o.funStuff.stickerAssets.cdnSubFolder+"/{categoryName}"+o.funStuff.stickerAssets.folderPostfix+"/{locale}{linkTemplate}?"+o.funStuff.cdnVersion,I.linkAssetPathTemplate=_+"/evergreen-assets/"+o.funStuff.stickerAssets.cdnSubFolder+"/{categoryName}"+o.funStuff.stickerAssets.folderPostfix+"/{locale}{link}?"+o.funStuff.cdnVersion,I.previewAssetPathTemplate=_+"/evergreen-assets/funstuff/stickers/{locale}/assets/{categoryName}/Preview/{link}?"+o.funStuff.cdnVersion,I.pickerButtonTid="inputExtensionStickersButton",I.popoverTemplateUrl="components/fun-stuff-picker/input-extension-stickers.html",I.onSaveCallback=t.onSaveCallback,I.enableAddToTeamMemeSettings=s.valueAsBoolean(o.settings.names.enableAddToTeamMemeSettings),I.categoriesStickersMemeMap[a.Stickers]=[],I.categoriesStickersMemeMap[a.Meme]=[],r.$on(t,o.events.tabView.tabSwitched,function(e,t){if(t&&t.selectedTabId){var n=I.getCategoryTabDataIndex(t.selectedTabId);if(!(n>-1))return;I.displayCategoryTab[n]=!0,"Popular"===t.selectedTabId?I.isPopularTab=!0:I.isPopularTab=!1;var i=I.getCategoryTabData(t.selectedTabId);if(i&&(i.isEditImage=!1),(i=I.getCategoryTabData(t.previousTabId))&&(i.isEditImage=!1),I.stickerMetadata=null,I.memeMetadata=null,I.stickerAssetType="","Popular"!==t.selectedTabId){var s=I.categoryDataMap[t.selectedTabId],r=l.getCategoryMetadata(t.selectedTabId,a.Stickers),c=0,p=0;s&&s.categoryData&&(c=s.categoryData.length),r&&(p=r.numEditable),m.event(o.telemetry.funStuff.tabSelected,{numitem:c,numitemedit:p})}else m.event(o.telemetry.funStuff.tabSelected)}}),I}return i(t,e),t.$inject=["$scope","ariaLiveService","resources","constants","settingsService","eventingService","emojiEmoticonCategoryService","stickerMemeCategoryService","commandsService","loggingService","channelService","tenantSettingsStore","filesAsyncMediaService","conversationsService","tooltipService","utilityService","sxConfig","$translate","$timeout","$q","$popover","$element","$filter","$ocLazyLoad","channelMembershipPropertiesService","channelSettingsService","sharedChannelsMessagingPolicySettingsStore"],t.prototype.saveSticker=function(e){this.focusComposeBox(),this.onSaveCallback&&this.onSaveCallback({data:e})},t.prototype.saveMeme=function(e){this.focusComposeBox(),this.onSaveCallback&&(e.mediaUploadData.type=this.constants.funStuff.assetType.meme,this.onSaveCallback({data:e}))},t.prototype.focusComposeBox=function(){this.setRefocusCallback&&(this.setRefocusCallback({data:!0}),this.shouldRefocus=!0)},t.prototype.customLoadPopoverAssets=function(){this.isExtensionEnabled&&(this.isPopularTab=!0),this.setRefocusCallback&&this.setRefocusCallback({data:!1}),this.customMemesEnabled=this.isCustomMemesEnabled(),this.getCategoryTabData("Meme")&&this.loadStickerMemeData(a.Meme),this.searchCategories.indexOf("Stickers")>-1&&(this.loadPopularStickers(),this.loadStickerMemeData(a.Stickers)),this.stickerMetadata=null,this.memeMetadata=null,this.stickerAssetType=""},t.prototype.loadPopularStickers=function(){var e=this;this.popularDataMap.Stickers={},this.isExtensionEnabled&&jQuery.isEmptyObject(this.popularDataMap.Stickers)&&this.stickerMemeCategoryService.getMRUSticker().then(function(t){e.setLocalizedUrls(t),e.popularDataMap.Stickers={popular:t}},function(t){e.hasDataError=!0})},t.prototype.setLocalizedUrls=function(e){var t=this;_.forEach(e,function(e){var n=_.includes(e.localizedAssets,t.currentLocale);e.linkUrl=t.linkAssetPathTemplate.replace("{locale}",n?t.currentLocale+"/":"").replace("{categoryName}",e.categoryName.toLowerCase()).replace("{link}",e.link),e.linkTemplate&&(e.linkTemplateUrl=t.templateAssetPathTemplate.replace("{locale}",n?t.currentLocale+"/":"").replace("{categoryName}",e.categoryName.toLowerCase()).replace("{linkTemplate}",e.linkTemplate));var i=n?t.currentLocale:e.defaultLocale||t.currentLocale;e.previewUrl=t.previewAssetPathTemplate.replace("{locale}",_.includes(e.localeException,t.currentLocale)?t.currentLocale:i).replace("{categoryName}",e.categoryName).replace("{link}",e.previewLink||e.link)})},t.prototype.loadStickerMemeData=function(e){if(this.stickerMemeCategoryService.dataTypeExists(e)){if(this.categoryDataMap&&this.categoriesStickersMemeMap[e]&&0===this.categoriesStickersMemeMap[e].length){this.categoriesStickersMemeMap[e]=this.stickerMemeCategoryService.getCategoryKeys(e);for(var t=[],n=[],i=0;i<this.categoriesStickersMemeMap[e].length;i++){var o=this.getCategoryTabData(this.categoriesStickersMemeMap[e][i]);if(o&&o.icon&&o.name){t=this.stickerMemeCategoryService.getCategoryData(this.categoriesStickersMemeMap[e][i],e),e===a.Stickers&&this.setLocalizedUrls(t),n.push.apply(n,t);var s={categoryData:t,headerIcon:(o=this.getCategoryTabData(this.categoriesStickersMemeMap[e][i])).icon,categoryName:o.name};this.categoryDataMap[this.categoriesStickersMemeMap[e][i]]&&(this.categoryDataMap[this.categoriesStickersMemeMap[e][i]]=s)}}this.stickerMemeAllDataSetMap[e]={categoryData:n}}e===a.Meme&&(this.loadTeamMemeMetadata(!1),this.limit=this.constants.funStuff.teamMeme.itemsPerPage-(this.customMemesEnabled?1:0),this.allMemes=this.teamMemeCategoryData.concat(this.categoryDataMap.Meme.categoryData))}},t.prototype.initControl=function(){e.prototype.initControl.call(this),this.teamMemeCategoryData=[],this.categoriesStickersMemeMap=[],this.stickerMemeAllDataSetMap=[],this.categoriesStickersMemeMap[a.Stickers]=[],this.categoriesStickersMemeMap[a.Meme]=[],this.isPopularTab=!0,this.stickerMetadata=null,this.memeMetadata=null,this.stickerAssetType="",this.loadTeamMemeMetadata(!0)},t.prototype.isCategoryEnabled=function(e){return"Meme"===e?this.isExtensionEnabled:"Stickers"===e&&this.isExtensionEnabled},t.prototype.isTabEnabled=function(e){return"Popular"===e?this.isExtensionEnabled:"Giphy"!==e&&"Emoji"!==e&&this.isExtensionEnabled},t.prototype.onSearchTextChanged=function(){var e=this.evaluateSearchResults(2,"Meme"),t=this.evaluateSearchResults(1,"Stickers"),n=t>0&&e>0?2:1;this.announceSearchResultsChanged(t+e,n)},t.prototype.evaluateSearchResults=function(e,t){var n=this.stickerMemeAllDataSetMap[e];if(n&&n.categoryData){var i=this.$filter("filter")(n.categoryData,this.searchTerm);this.searchDataMap[t]=i;var a=this.searchMaxIcons[t];return a>0?Math.min(i.length,a):i.length}},t.prototype.onStickerClicked=function(e){var t=this.constants.telemetry.funStuff.sticker.inputMethod.stickerPicker;this.isPopularTab&&(t=this.constants.telemetry.funStuff.sticker.inputMethod.stickerSearch),this.focusComposeBox(),this.eventingService.$emit(this.constants.events.funStuff.add,{type:this.constants.events.funStuff.type.sticker,imageUrl:e.linkUrl,imageId:e.link,categoryName:e.categoryName,description:e.name,handler:this.newMessageControllerObjId,method:t})},t.prototype.onStickerEdit=function(e,t){if(t&&"Meme"===t.categoryName)this.onMemeEdit(e,t);else{var n=this.getCategoryTabData(e);if(n&&t.linkTemplateUrl&&t.caption){this.stickerMetadata={id:t.id,url:t.linkTemplateUrl,startX:0,startY:0,endX:0,endY:0,fontFamily:"",fontColor:"",placeholder:"",setCaption:!1,type:this.constants.funStuff.assetType.stickersCustom},t.caption.region&&(this.stickerMetadata.startX=t.caption.region.startX,this.stickerMetadata.startY=t.caption.region.startY,this.stickerMetadata.endX=t.caption.region.endX,this.stickerMetadata.endY=t.caption.region.endY),t.caption.font&&(this.stickerMetadata.fontFamily=t.caption.font.family,this.stickerMetadata.fontColor=t.caption.font.color);var i="";t.caption.placeholder&&((i=this.$translate.instant(t.caption.placeholder))&&(this.stickerMetadata.setCaption=!0),i||(i=this.$translate.instant(this.resources.strings.stickers_defaultCaption))),this.stickerMetadata.placeholder=i,this.stickerCaptionTracked=!1,this.stickerAssetType=this.constants.funStuff.assetType.stickersCustom,n.isEditImage=!0,this.loggingService.event(this.constants.telemetry.funStuff.sticker.editSticker,{id:t.id})}}},t.prototype.onMemeEdit=function(e,t){var n=this.getCategoryTabData(e);if(n&&t.linkTemplate&&t.caption){var i=this.getCdnUrl(t,this.constants.funStuff.stickerAssets.folderPostfixLarge);this.memeMetadata={id:t.id,url:i,captionTop:{startX:0,startY:0,endX:0,endY:0},captionBottom:{startX:0,startY:0,endX:0,endY:0},fontFamily:"",fontColor:"",fontBorderColor:"",placeholderTop:"",placeholderBottom:"",setCaption:!1,type:this.constants.funStuff.assetType.meme},t.caption.regionTop&&(this.memeMetadata.captionTop.startX=t.caption.regionTop.startX,this.memeMetadata.captionTop.startY=t.caption.regionTop.startY,this.memeMetadata.captionTop.endX=t.caption.regionTop.endX,this.memeMetadata.captionTop.endY=t.caption.regionTop.endY),t.caption.regionBottom&&(this.memeMetadata.captionBottom.startX=t.caption.regionBottom.startX,this.memeMetadata.captionBottom.startY=t.caption.regionBottom.startY,this.memeMetadata.captionBottom.endX=t.caption.regionBottom.endX,this.memeMetadata.captionBottom.endY=t.caption.regionBottom.endY),t.caption.font&&(this.memeMetadata.fontFamily=t.caption.font.family,this.memeMetadata.fontColor=t.caption.font.color,this.memeMetadata.fontBorderColor=t.caption.font.border);var a="",o="";t.caption.placeholderTop&&(a=this.$translate.instant(t.caption.placeholderTop)),a||(a=this.$translate.instant(this.resources.strings.meme_defaultCaptionTop)),this.memeMetadata.placeholderTop=a,t.caption.placeholderBottom&&(o=this.$translate.instant(t.caption.placeholderBottom)),o||(o=this.$translate.instant(this.resources.strings.meme_defaultCaptionBottom)),this.memeMetadata.placeholderBottom=o,n.isEditImage=!0,this.memeCaptionTracked=!1,this.stickerAssetType=this.constants.funStuff.assetType.meme,this.loggingService.event(this.constants.telemetry.funStuff.meme.editMeme,{id:t.id})}},t.prototype.onStickerEditCancel=function(e,t){e&&t&&(e.isEditImage=!1,this.loggingService.event(this.constants.telemetry.funStuff.sticker.editStickerCancel,{id:t}))},t.prototype.onStickerCaptionChanged=function(e){!this.stickerCaptionTracked&&e&&(this.stickerCaptionTracked=!0,this.loggingService.event(this.constants.telemetry.funStuff.sticker.editStickerCaption,{id:e}))},t.prototype.onMemeEditCancel=function(e,t){e&&t&&(e.isEditImage=!1,this.loggingService.event(this.constants.telemetry.funStuff.meme.editMemeCancel,{id:t}))},t.prototype.onMemeCaptionChanged=function(e){!this.memeCaptionTracked&&e&&(this.memeCaptionTracked=!0,this.loggingService.event(this.constants.telemetry.funStuff.meme.editMemeCaption,{id:e}))},t.prototype.switchEmojiTab=function(e,t){e&&t&&this.eventingService.$emit(this.constants.events.tabView.tabSwitchedWithLink,{tabName:e,tabIndex:t})},t.prototype.isOwner=function(e){var t=e.id.split("|");return this.adminView||t[0]==this.currentUserMri},t.prototype.showMore=function(){this.limit=this.limit+this.constants.funStuff.teamMeme.itemsPerPage},t.prototype.canAddToTeammeme=function(){return this.enableAddToTeamMemeSettings&&!this.isP2PMessage&&(this.teamMemeEnabled||this.adminView)},t.prototype.onTeamMemeEdit=function(e,t,n,i){var a=this,o=this.getCategoryTabData(e);if(o&&t.linkTemplate){this.memeMetadata={id:t.id,url:t.linkTemplate,imageSrc:"",captionTop:{startX:0,startY:0,endX:0,endY:0},captionBottom:{startX:0,startY:0,endX:0,endY:0},fontFamily:"Impact",fontColor:"white",fontBorderColor:"black",placeholderTop:"",placeholderBottom:"",setCaption:!1,type:this.constants.funStuff.assetType.meme,isTeamMeme:!0,isNewTeamMeme:this.canAddToTeammeme()&&n},this.memeMetadata.placeholderTop=this.$translate.instant(this.resources.strings.meme_defaultCaptionTop),this.memeMetadata.placeholderBottom=this.$translate.instant(this.resources.strings.meme_defaultCaptionBottom);(n&&i?this.readImageAsBase64(i):this.loadTeamMemeImage(t,!1)).then(function(e){a.memeMetadata.imageSrc=e,a.notificationBannerStore=new teamspace.services.NotificationBannerStore(a.loggingService),o.isEditImage=!0,a.memeCaptionTracked=!1,a.stickerAssetType=a.constants.funStuff.assetType.meme,a.loggingService.event(a.constants.telemetry.funStuff.meme.editMeme,{id:a.memeMetadata.id})})}},t.prototype.onAddToTeamMemeCollection=function(e){var t=this.teamMemeItemMetadata;e&&(this.addTeamMeme(t),this.loggingService.event(this.constants.telemetry.funStuff.meme.addTeamMeme,{id:t.id}))},t.prototype.onMemeSelectedChange=function(e,t){var n=this,i=t[0];if(void 0!=i){var a=i.size;i.type.match("image.*")?a>this.constants.funStuff.teamMeme.imageMaxSize?this.onError("image not qualify, size or type",teamspace.components.InputExtensionPickerErrorCode.TeamMemeImageTooBig):a<this.constants.funStuff.teamMeme.imageMinSize?this.onError("image not qualify, size or type",teamspace.components.InputExtensionPickerErrorCode.TeamMemeImageTooSmall):this.readImageAsBase64(i).then(function(t){n.conversationsService.ensureConversationCreated(n.convId).then(function(t){var a={categoryName:"",className:"meme-team-fun",id:n.currentUserMri+"|"+n.utilityService.generateUUID(),linkTemplate:"",link:"",name:"meme_"+i.name};a.linkTemplate=window.URL.createObjectURL(i),a.link=window.URL.createObjectURL(i),n.teamMemeItemMetadata=a,n.onTeamMemeEdit(e,a,!0,i)},function(e){n.onError("Failed to create conversation",teamspace.components.InputExtensionPickerErrorCode.ConversationNotCreated)})},function(e){n.onError("Load local image failed",teamspace.components.InputExtensionPickerErrorCode.TeamMemeDownloadError)}):this.onError("image not qualify",teamspace.components.InputExtensionPickerErrorCode.TeamMemeNotImageType)}},t.prototype.addTeamMeme=function(e){this.addTeamMemeToSettingsStore(this.convId,e),this.loggingService.event(this.constants.telemetry.funStuff.meme.addTeamMeme,{id:e.id})},t.prototype.onTeamMemeDelete=function(e){this.deleteTeamMemeFromSettingsStore(this.convId,e),this.loggingService.event(this.constants.telemetry.funStuff.meme.deleteTeamMeme,{id:e.id})},t.prototype.deleteTeamMemeFromSettingsStore=function(e,t){this.teamMemeMetadataExtension[t.id].active=!1},t.prototype.addTeamMemeToSettingsStore=function(e,t){this.teamMemeCategoryData.unshift(t)},t.prototype.getTeamMemesFromSettingsStore=function(e){return this.$q.when(this.teamMemeCategoryData)},t.prototype.loadTeamMemeMetadata=function(e){var t=this;return this.isP2PMessage?this.$q.when(null):this.getTeamMemesFromSettingsStore(this.convId).then(function(n){for(var i=[],a=n.length,o=e?Math.min(a,t.constants.funStuff.teamMeme.preloadNumber):a,s=0;s<o;s++){var r=n[s];i.push(t.loadTeamMemeImage(r,!0))}})},t.prototype.downloadImageFromAms=function(e){var t=this;return this.filesAsyncMediaService.downloadItem({containerId:this.convId,objectUrl:e}).then(function(e){return t.readImageAsBase64(e.data)},function(e){return t.onError("Error while downloading",teamspace.components.InputExtensionPickerErrorCode.TeamMemeDownloadError),""})},t.prototype.isCustomMemesEnabled=function(){var e;if(this.isExternalTenantSharedChannel){var t=this.channelService.getChannelByObjectId(this.skypeConversationId);e=this.settingsService.valueAsBoolean(this.constants.settings.names.enableSharedChannelFetchPolicyFromMT)&&this.sharedChannelsMessagingPolicySettingsStore.getTenantSettingValue(t.hostTenantId,SkypeX.Services.MessagingPolicySettingsStorageKey.allowMemes)}else e=this.tenantSettingsStore.getSettingValue(SkypeX.Services.TenantSettingsStorageKey.funControl_isCustomMemesEnabled)||!1;var n=this.channelSettingsService.isCustomMemesEnabled(this.skypeConversationId),i=void 0==n||n;return e&&i},t.prototype.readImageAsBase64=function(e){var t=this.$q.defer(),n=new FileReader;return n.readAsDataURL(e),n.onload=function(e){t.resolve(e.target.result)},t.promise},t.prototype.loadTeamMemeImage=function(e,t){var n=this,i=this.$q.defer();return void 0===this.teamMemeMetadataExtension[e.id]&&(this.teamMemeMetadataExtension[e.id]={active:!0,thumbnailSrc:""}),t&&this.teamMemeMetadataExtension[e.id].thumbnailSrc.length>0?(i.resolve(this.teamMemeMetadataExtension[e.id].thumbnailSrc),i.promise):this.downloadImageFromAms(t?e.link:e.linkTemplate).then(function(i){return t&&(n.teamMemeMetadataExtension[e.id].thumbnailSrc=i),i},function(e){return n.onError("Error while downloading",teamspace.components.InputExtensionPickerErrorCode.TeamMemeDownloadError),""})},t.prototype.getCdnUrl=function(e,t){var n=this.constants.funStuff;return""+(this.settingsService.getStaticsUri()+"/evergreen-assets/"+n.stickerAssets.cdnSubFolder+"/")+e.categoryName.toLowerCase()+t+"/"+e.linkTemplate+"?"+n.cdnVersion},t}(teamspace.components.BaseInputExtension);t.InputExtensionStickersController=c,angular.module("teamspace.inputExtensionStickers",["focusOn","skypeX.sharedChannelsMessagingPolicySettingsStore"]).directive("inputExtensionStickers",[function(){return{restrict:"E",scope:{ctrlid:"@",onSaveCallback:"&"},bindToController:{forceTooltipBelow:"@",isDisabled:"=?",messageType:"=?",avoidScreenEdge:"<?",skypeConversationId:"=?",teamName:"=?",teamId:"=?",setRefocusCallback:"&"},controllerAs:"inputExtensionStickers",templateUrl:"components/fun-stuff-picker/input-extension-stickers-button.html",controller:c}}]).run(["$templateCache",function(e){e.put("components/fun-stuff-picker/input-extension-stickers-button.html",o),e.put("components/fun-stuff-picker/input-extension-stickers.html",s)}])},2617:function(e,t){e.exports='\x3c!-- We need the high padding to prevent the popover overlaying on new-message area on non-expanded state.--\x3e\n<button data-placement="{{inputExtensionStickers.popoverPlacement}}" type="button" role="button" acc-role="menu-item" prevent-override-role="true" class="ts-sym pull-right icons-emoji app-icons-fill-focus app-icons-fill-hover inset-border inset-border-round inset-border-themed shortcuts-funstuff" ng-disabled="inputExtensionStickers.isDisabled" ng-click="inputExtensionStickers.popoverMenuHandler($event, this)" data-prevent-refocus="{{ inputExtensionStickers.shouldRefocus }}" track-outcome="{{::$root.trackConstants.trackOutcome.nav}}" track-scenario="{{::$root.trackConstants.trackScenario.composeOpenFunPicker}}" track-scenario-type="{{::$root.trackConstants.trackScenarioType.composeMsg}}" track-name="{{::$root.trackConstants.trackModuleName.funStuffPicker}}" track-type="{{::$root.trackConstants.trackType.compose}}" track-summary="Stickers input Extension picker" ts-event-class="{ \'tooltip.show\': \'selected\', \'tooltip.hide\': \'-selected\' }" data-tid="inputExtensionStickersButton" title="{{::$root.resources.strings.messages_composeBoxStickerPicker|translate}}" aria-label="{{::$root.resources.strings.aria_messages_composeBoxStickerPicker|translate}}">\n  <ng-include src="\'svg/icons-sticker.html\'"></ng-include>\n</button>\n'},2618:function(e,t){e.exports='<div class="popover sticker-input-extension-popover input-extension-popover top" ng-class="{hidePickerLeftRail: inputExtensionStickers.hidePickerLeftRail}">\n  <div class="loading" ng-if="inputExtensionStickers.loading">\n    <div translate-once="{{::$root.resources.strings.funStuffPicker_loadingDataLabel}}"></div>\n    <busy-animation></busy-animation>\n  </div>\n  <div class="fun-info-banner">\n    <notification-banner notification-banner-store="inputExtensionStickers.notificationBannerStore" tab="true"></notification-banner>\n  </div>\n  <div class="fun-stuff-content" data-tid="stickersFunStuffContent" ng-if="!inputExtensionStickers.loading" ng-mousedown="inputExtensionStickers.clearBanner()" acc-role="dialog">\n    <tab-view>\n      <div ng-repeat="tabData in ::inputExtensionStickers.categoryTabData track by $index">\n        <tab-view-item id="{{tabData.id}}" heading="{{tabData.name}}" imageheader="{{tabData.icon}}" image-url="{{tabData.imageUrl}}">\n          <div ng-if="!tabData.isEditImage">\n            \x3c!--Popular Pane --\x3e\n            <div ng-if="tabData.id === \'Popular\'">\n              <input sanitized type="search" ng-model="inputExtensionStickers.searchTerm" class="form-control input-extension-search-box" placeholder="{{::inputExtensionStickers.searchPlaceholder}}" set-focus="inputExtensionStickers.isTooltipVisible" ng-change="inputExtensionStickers.searchTextChanged()">\n              <ng-include src="\'svg/icons-search.html\'"></ng-include>\n              <div class="input-extension-scroll-search-results" simple-scrollbar>\n                <div>\n                  \x3c!-- Display static popular icons on popular page --\x3e\n                  <div class="recent-content" ng-if="!inputExtensionStickers.searchTerm">\n                    <div class="text-label" translate-once="{{::$root.resources.strings.funStuffPicker_popularStickerLabel}}"></div>\n                    <ul class="input-extension-tile" acc-role="listgrid-horizontal-and-vertical" col-count="3" role="menu">\n                      <li class="input-extension-item" role="none" ng-repeat="icon in inputExtensionStickers.popularDataMap[\'Stickers\'].popular | limitTo: inputExtensionStickers.popularMaxIcons[\'Stickers\'] track by $index">\n                        <a ng-if="!icon.caption && !icon.linkTemplate" class="link" data-shortname="{{icon.link}}" index="{{$index}}" title="{{icon.name}}" ng-click="inputExtensionStickers.onStickerClicked(icon); $hide()" acc-role="listgrid-item" role="menuitem" tabindex="{{$first?0:-1}}" track-outcome="{{::$root.trackConstants.trackOutcome.select}}" track-scenario="{{::$root.trackConstants.trackScenario.funSelectItem}}" track-scenario-type="{{::$root.trackConstants.trackScenarioType.composeMsg}}" track-name="{{::$root.trackConstants.trackModuleName.funItem}}" track-type="{{::$root.trackConstants.trackType.fun}}" track-summary="{{icon.name}}" track-state="Stickers" track-data="{type:\'{{::tabData.id}}\', searchTermLength:\'{{!!inputExtensionStickers.searchTerm ? inputExtensionStickers.searchTerm.length : 0}}\', position:\'{{::$index}}\'}">\n                          <span ng-if="icon.categoryName !== \'Meme\'" ng-style="{\'background-image\': \'url(\' + icon.previewUrl + \')\'}" class="{{icon.className}}"></span>\n                          <span ng-if="icon.categoryName === \'Meme\'" class="{{icon.className}}"></span>\n                        </a>\n                        <div ng-if="icon.caption && icon.linkTemplate" ng-click="inputExtensionStickers.onStickerEdit(tabData.id, icon)" acc-role="listgrid-item" role="menuitem" aria-label="{{icon.name}} {{::($root.resources.strings.funStuffPicker_stickerEditAriaLabel|translate)}}" tabindex="{{$first?0:-1}}" track-outcome="{{::$root.trackConstants.trackOutcome.select}}" track-scenario="{{::$root.trackConstants.trackScenario.funSelectItem}}" track-scenario-type="{{::$root.trackConstants.trackScenarioType.composeMsg}}" track-name="{{::$root.trackConstants.trackModuleName.funItem}}" track-type="{{::$root.trackConstants.trackType.fun}}" track-summary="{{icon.name}}" track-state="Stickers" track-data="{type:\'{{::tabData.id}}\', searchTermLength:\'{{!!inputExtensionStickers.searchTerm ? inputExtensionStickers.searchTerm.length : 0}}\', position:\'{{::$index}}\'}">\n                          <a class="link" data-shortname="{{icon.link}}" index="{{$index}}" title="{{icon.name}}" tabindex="-1">\n                            <span ng-if="icon.categoryName !== \'Meme\'" ng-style="{\'background-image\': \'url(\' + icon.previewUrl + \')\'}" class="{{icon.className}}"></span>\n                            <span ng-if="icon.categoryName === \'Meme\'" class="{{icon.className}}"></span>\n                          </a>\n                          <div ng-if="icon.caption && icon.linkTemplate" class="link-edit">\n                            <ng-include class="icons-white-override" src="\'svg/icons-edit.html\'"></ng-include>\n                          </div>\n                        </div>\n                      </li>\n                    </ul>\n                  </div>\n                  \x3c!-- Display Search Results --\x3e\n                  \x3c!-- For Memes --\x3e\n                  <div class="search-sticker-content" ng-if="inputExtensionStickers.isExtensionEnabled && inputExtensionStickers.searchTerm && inputExtensionStickers.searchDataMap[\'Meme\'].length >= 1">\n                    <div class="label-container">\n                      <div class="text-label" translate-once="{{::$root.resources.strings.funStuffPicker_memeLabelUppercase}}"></div>\n                      <button type="button" class="btn btn-link btn-sm view-more-label" ng-if="inputExtensionStickers.showViewAllLink && inputExtensionStickers.searchDataMap[\'Meme\'].length > inputExtensionStickers.searchMaxIcons[\'Meme\']" ng-click="inputExtensionStickers.switchEmojiTab(\'Meme\',3)" translate-once="{{::$root.resources.strings.funStuffPicker_viewAllLabel}}" track-outcome="{{::$root.trackConstants.trackOutcome.inspect}}" track-scenario="{{::$root.trackConstants.trackScenario.funMoreItem}}" track-scenario-type="{{::$root.trackConstants.trackScenarioType.composeMsg}}" track-name="{{::$root.trackConstants.trackModuleName.funViewMoreLabel}}" track-type="{{::$root.trackConstants.trackType.fun}}" track-summary="View all Meme"></button>\n                    </div>\n                    <ul acc-role="listgrid-horizontal-and-vertical" col-count="3" role="menu" class="input-extension-tile">\n                      <li class="input-extension-item" role="none" ng-repeat="icon in inputExtensionStickers.searchDataMap[\'Meme\'] | limitTo: inputExtensionStickers.searchMaxIcons[\'Meme\'] track by $index">\n                        <a class="link-edit-meme" data-shortname="{{icon.link}}" index="{{$index}}" title="{{icon.name}}" ng-click="inputExtensionStickers.onMemeEdit(tabData.id, icon)" acc-role="listgrid-item" role="menuitem" aria-label="{{icon.name}} {{::($root.resources.strings.funStuffPicker_stickerEditAriaLabel|translate)}}" tabindex="{{$first?0:-1}}" track-outcome="{{::$root.trackConstants.trackOutcome.select}}" track-scenario="{{::$root.trackConstants.trackScenario.funSelectItem}}" track-scenario-type="{{::$root.trackConstants.trackScenarioType.composeMsg}}" track-name="{{::$root.trackConstants.trackModuleName.funItem}}" track-type="{{::$root.trackConstants.trackType.fun}}" track-summary="{{icon.name}}" track-state="Meme" track-data="{type:\'{{::tabData.id}}\', searchTermLength:\'{{!!inputExtensionStickers.searchTerm ? inputExtensionStickers.searchTerm.length : 0}}\', position:\'{{::$index}}\'}">\n                          <span class="{{icon.className}}"></span>\n                        </a>\n                      </li>\n                    </ul>\n                  </div>\n                  \x3c!-- For Stickers --\x3e\n                  <div class="search-sticker-content" ng-if="inputExtensionStickers.isExtensionEnabled && inputExtensionStickers.searchTerm && inputExtensionStickers.searchDataMap[\'Stickers\'].length >= 1">\n                    <div class="label-container">\n                      <div class="text-label" translate-once="{{::$root.resources.strings.funStuffPicker_stickerLabelUppercase}}"></div>\n                      <button type="button" class="btn btn-link btn-sm view-more-label" ng-if="inputExtensionStickers.showViewAllLink && inputExtensionStickers.searchDataMap[\'Stickers\'].length > inputExtensionStickers.searchMaxIcons[\'Stickers\']" ng-click="inputExtensionStickers.switchEmojiTab(\'Stickers\', 4)" translate-once="{{::$root.resources.strings.funStuffPicker_viewAllLabel}}" track-outcome="{{::$root.trackConstants.trackOutcome.inspect}}" track-scenario="{{::$root.trackConstants.trackScenario.funMoreItem}}" track-scenario-type="{{::$root.trackConstants.trackScenarioType.composeMsg}}" track-name="{{::$root.trackConstants.trackModuleName.funViewMoreLabel}}" track-type="{{::$root.trackConstants.trackType.fun}}" track-summary="View all Stickers"></button>\n                    </div>\n                    <ul acc-role="listgrid-horizontal-and-vertical" col-count="3" role="menu" class="input-extension-tile">\n                      <li class="input-extension-item" role="none" ng-repeat="icon in inputExtensionStickers.searchDataMap[\'Stickers\'] | limitTo: inputExtensionStickers.searchMaxIcons[\'Stickers\'] track by $index">\n                        <a ng-if="!icon.caption && !icon.linkTemplate" class="link" data-shortname="{{icon.link}}" index="{{$index}}" title="{{icon.name}}" ng-click="inputExtensionStickers.onStickerClicked(icon); $hide()" acc-role="listgrid-item" role="menuitem" tabindex="{{$first?0:-1}}" track-outcome="{{::$root.trackConstants.trackOutcome.select}}" track-scenario="{{::$root.trackConstants.trackScenario.funSelectItem}}" track-scenario-type="{{::$root.trackConstants.trackScenarioType.composeMsg}}" track-name="{{::$root.trackConstants.trackModuleName.funItem}}" track-type="{{::$root.trackConstants.trackType.fun}}" track-summary="{{icon.name}}" track-state="Stickers" track-data="{type:\'{{::tabData.id}}\', searchTermLength:\'{{!!inputExtensionStickers.searchTerm ? inputExtensionStickers.searchTerm.length : 0}}\', position:\'{{::$index}}\'}">\n                          <span ng-style="{\'background-image\': \'url(\' + icon.previewUrl + \')\'}" class="{{icon.className}}"></span>\n                        </a>\n                        <div ng-if="icon.caption && icon.linkTemplate" ng-click="inputExtensionStickers.onStickerEdit(tabData.id, icon);" acc-role="listgrid-item" role="menuitem" aria-label="{{icon.name}} {{::($root.resources.strings.funStuffPicker_stickerEditAriaLabel|translate)}}" tabindex="{{$first?0:-1}}" track-outcome="{{::$root.trackConstants.trackOutcome.select}}" track-scenario="{{::$root.trackConstants.trackScenario.funSelectItem}}" track-scenario-type="{{::$root.trackConstants.trackScenarioType.composeMsg}}" track-name="{{::$root.trackConstants.trackModuleName.funItem}}" track-type="{{::$root.trackConstants.trackType.fun}}" track-summary="{{icon.name}}" track-state="Stickers" track-data="{type:\'{{::tabData.id}}\', searchTermLength:\'{{!!inputExtensionStickers.searchTerm ? inputExtensionStickers.searchTerm.length : 0}}\', position:\'{{::$index}}\'}">\n                          <a class="link" data-shortname="{{icon.link}}" index="{{$index}}" title="{{icon.name}}">\n                            <span ng-style="{\'background-image\': \'url(\' + icon.previewUrl + \')\'}" class="{{icon.className}}"></span>\n                          </a>\n                          <div ng-if="icon.caption && icon.linkTemplate" class="link-edit">\n                            <ng-include class="icons-white-override" src="\'svg/icons-edit.html\'"></ng-include>\n                          </div>\n                        </div>\n                      </li>\n                    </ul>\n                  </div>\n                  \x3c!-- For No matches --\x3e\n                  <div ng-if="inputExtensionStickers.searchTerm && inputExtensionStickers.searchDataMap[\'Meme\'].length === 0 && inputExtensionStickers.searchDataMap[\'Stickers\'].length === 0" class="center-container" translate-once="{{::$root.resources.strings.funStuffPicker_search_noResults}}">\n                  </div>\n                </div>\n              </div>\n            </div>\n            \x3c!-- End Popular Pane --\x3e\n            \x3c!-- Meme Panes --\x3e\n            <div ng-if="tabData.id === \'Meme\' && inputExtensionStickers.displayCategoryTab[$index]">\n              <div class="input-extension-scroll-results" on-edge-callback="inputExtensionStickers.showMore()" simple-scrollbar>\n                <div>\n                  <ul acc-role="listgrid-horizontal-and-vertical" col-count="3" role="menu" class="input-extension-tile" set-focus="inputExtensionStickers.isTooltipVisible">\n                    <li class="input-extension-item btn-add-team-meme" role="none" ng-if="inputExtensionStickers.customMemesEnabled">\n                        <input sanitized type="file" acc-role="listgrid-item" role="menuitem" ngf-select ngf-resize="{width: 360, height: 360, centerCrop: false}" ngf-change="inputExtensionStickers.onMemeSelectedChange(tabData.id, $files)" ng-model="inputExtensionStickers.teammemeFile" accept="image/png, image/jpeg, image/jpg" translate-once-title="{{::$root.resources.strings.funStuffPicker_memeUploadAFile}}"/>\n                        <ng-include src="\'svg/icons-add.html\'"></ng-include>\n                    </li>\n                    \x3c!--meme with pagination--\x3e\n                    <li class="input-extension-item" role="none" ng-repeat="icon in inputExtensionStickers.allMemes | limitTo: inputExtensionStickers.limit track by $index">\n                      <div role="none" ng-if="icon.className === \'meme-team-fun\'\n                                 && inputExtensionStickers.teamMemeMetadataExtension[icon.id].active === true\n                                 && inputExtensionStickers.teamMemeMetadataExtension[icon.id].thumbnailSrc !== \'\'">\n                        <a class="link-edit-meme" data-shortname="{{icon.link}}" index="{{$index}}" title="{{icon.name}}" ng-if="icon.linkTemplate" ng-click="inputExtensionStickers.onTeamMemeEdit(tabData.id, icon, false)" acc-role="listgrid-item" role="menuitem" aria-label="{{icon.name}} {{::($root.resources.strings.funStuffPicker_stickerEditAriaLabel|translate)}}" tabindex="{{$first?0:-1}}" track-outcome="{{::$root.trackConstants.trackOutcome.select}}" track-scenario="{{::$root.trackConstants.trackScenario.funSelectItem}}" track-scenario-type="{{::$root.trackConstants.trackScenarioType.composeMsg}}" track-name="{{::$root.trackConstants.trackModuleName.funItem}}" track-type="{{::$root.trackConstants.trackType.fun}}" track-summary="{{icon.shortname}}" track-data="{type:\'{{::tabData.id}}\', searchTermLength:\'{{!!inputExtensionStickers.searchTerm ? inputExtensionStickers.searchTerm.length : 0}}\', position:\'{{::$index}}\'}">\n\n                          <span class="meme-team-fun" ng-style="{\'background-image\':\'url({{inputExtensionStickers.teamMemeMetadataExtension[icon.id].thumbnailSrc}})\'}"></span>\n                        </a>\n                        <button class="memeaction" ng-if="::inputExtensionStickers.isOwner(icon)" ng-click="inputExtensionStickers.onTeamMemeDelete(icon)">\n                          <ng-include src="\'svg/icons-delete.html\'"></ng-include>\n                        </button>\n                      </div>\n                      <div role="none" ng-if="icon.className !== \'meme-team-fun\' && icon.caption && icon.linkTemplate">\n                        <a class="link-edit-meme" data-shortname="{{icon.link}}" index="{{$index}}" title="{{icon.name}}" ng-click="inputExtensionStickers.onMemeEdit(tabData.id, icon)" acc-role="listgrid-item" role="menuitem" aria-label="{{icon.name}} {{::($root.resources.strings.funStuffPicker_stickerEditAriaLabel|translate)}}" tabindex="{{$first?0:-1}}" track-outcome="{{::$root.trackConstants.trackOutcome.select}}" track-scenario="{{::$root.trackConstants.trackScenario.funSelectItem}}" track-scenario-type="{{::$root.trackConstants.trackScenarioType.composeMsg}}" track-name="{{::$root.trackConstants.trackModuleName.funItem}}" track-type="{{::$root.trackConstants.trackType.fun}}" track-summary="{{icon.name}}" track-state="Meme" track-data="{type:\'{{::tabData.id}}\', searchTermLength:\'{{!!inputExtensionStickers.searchTerm ? inputExtensionStickers.searchTerm.length : 0}}\', position:\'{{::$index}}\'}">\n                          <span class="{{icon.className}}"></span>\n                        </a>\n                      </div>\n                    </li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n            \x3c!-- End Meme Pane --\x3e\n            \x3c!-- Sticker Panes --\x3e\n            <div ng-if="tabData.id !== \'Popular\' && tabData.id !== \'Meme\'">\n              <div class="input-extension-scroll-results" ng-if="inputExtensionStickers.displayCategoryTab[$index]" simple-scrollbar>\n                <div>\n                  <ul acc-role="listgrid-horizontal-and-vertical" col-count="3" role="menu" class="input-extension-tile" set-focus="inputExtensionStickers.isTooltipVisible">\n                    <li class="input-extension-item" role="none" ng-repeat="icon in ::inputExtensionStickers.categoryDataMap[tabData.id].categoryData track by $index">\n                      \x3c!-- Non editable stickers --\x3e\n                      <a ng-if="!icon.caption && !icon.linkTemplate" class="link" data-shortname="{{::icon.link}}" index="{{$index}}" title="{{::icon.name}}" ng-click="inputExtensionStickers.onStickerClicked(icon); $hide()" acc-role="listgrid-item" role="menuitem" tabindex="{{$first?0:-1}}" track-outcome="{{::$root.trackConstants.trackOutcome.select}}" track-scenario="{{::$root.trackConstants.trackScenario.funSelectItem}}" track-scenario-type="{{::$root.trackConstants.trackScenarioType.composeMsg}}" track-name="{{::$root.trackConstants.trackModuleName.funItem}}" track-type="{{::$root.trackConstants.trackType.fun}}" track-summary="{{icon.name}}" track-state="Stickers" track-data="{type:\'{{::tabData.id}}\', searchTermLength:\'{{!!inputExtensionStickers.searchTerm ? inputExtensionStickers.searchTerm.length : 0}}\', position:\'{{::$index}}\'}">\n                        <span ng-style="{\'background-image\': \'url(\' + icon.previewUrl + \')\'}" class="{{::icon.className}}"></span>\n                      </a>\n                      \x3c!-- Editable Stickers --\x3e\n                      <div ng-if="icon.caption && icon.linkTemplate" ng-click="inputExtensionStickers.onStickerEdit(tabData.id, icon)" acc-role="listgrid-item" role="menuitem" aria-label="{{::icon.name}} {{::($root.resources.strings.funStuffPicker_stickerEditAriaLabel|translate)}}" tabindex="{{$first?0:-1}}" track-outcome="{{::$root.trackConstants.trackOutcome.select}}" track-scenario="{{::$root.trackConstants.trackScenario.funSelectItem}}" track-scenario-type="{{::$root.trackConstants.trackScenarioType.composeMsg}}" track-name="{{::$root.trackConstants.trackModuleName.funItem}}" track-type="{{::$root.trackConstants.trackType.fun}}" track-summary="{{icon.shortname}}" track-data="{type:\'{{::tabData.id}}\', searchTermLength:\'{{!!inputExtensionStickers.searchTerm ? inputExtensionStickers.searchTerm.length : 0}}\', position:\'{{::$index}}\'}">\n                        <a class="link" data-shortname="{{::icon.link}}" index="{{$index}}" title="{{::icon.name}}">\n                          <span ng-style="{\'background-image\': \'url(\' + icon.previewUrl + \')\'}" class="{{::icon.className}}"></span>\n                        </a>\n                        <div class="link-edit">\n                          <ng-include class="icons-white-override" src="\'svg/icons-edit.html\'"></ng-include>\n                        </div>\n                      </div>\n                    </li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n            \x3c!-- End Sticker Panes --\x3e\n          </div>\n          <div ng-if="tabData.isEditImage">\n            \x3c!-- For Stickers --\x3e\n            <image-caption ng-if="inputExtensionStickers.stickerMetadata && inputExtensionStickers.stickerAssetType === \'StickersCustom\'" metadata="inputExtensionStickers.stickerMetadata" oncancel="inputExtensionStickers.onStickerEditCancel(tabData, imageId)" oncaptionchanged="inputExtensionStickers.onStickerCaptionChanged(imageId)" hidepicker="$hide()" on-save-callback="inputExtensionStickers.saveSticker(data)">\n            </image-caption>\n\n            \x3c!-- For Memes --\x3e\n            <image-caption ng-if="inputExtensionStickers.memeMetadata && inputExtensionStickers.stickerAssetType === \'Meme\'" metadata="inputExtensionStickers.memeMetadata" oncancel="inputExtensionStickers.onMemeEditCancel(tabData, imageId)" onsaved="inputExtensionStickers.onAddToTeamMemeCollection(data)" oncaptionchanged="inputExtensionStickers.onMemeCaptionChanged(imageId)" hidepicker="$hide()" on-save-callback="inputExtensionStickers.saveMeme(data)">\n            </image-caption>\n          </div>\n        </tab-view-item>\n      </div>\n    </tab-view>\n  </div>\n</div>'},2619:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(2620),a=function(){function e(e,t){this.$scope=e,this.utilityService=t}return e.$inject=["$scope","utilityService"],e.prototype.useNgIncludeForIcon=function(e){return this.utilityService.useNgIncludeForIcon(e)},e}();t.ErrorInputExtensionController=a,angular.module("teamspace.inputExtensionError",["focusOn"]).directive("inputExtensionError",[function(){return{restrict:"E",scope:!0,bindToController:{errorMessage:"=",selectedItem:"=",errorMessageHeading:"<?"},controllerAs:"errorCtrl",templateUrl:"./input-extension-error.html",controller:a}}]).run(["$templateCache",function(e){e.put("./input-extension-error.html",i)}])},2620:function(e,t){e.exports='<div class="error-input-extension-popover input-extension-popover">\n  <div class="branded-search-box">\n    <div class="image-container" ng-style="{ \'background\': errorCtrl.selectedItem.accentColor }">\n      <ng-include src="::errorCtrl.selectedItem.imageUrl" ng-if="::errorCtrl.useNgIncludeForIcon(errorCtrl.selectedItem.imageUrl)"></ng-include>\n      <img ng-src="{{::errorCtrl.selectedItem.imageUrl}}" ng-if="::!errorCtrl.useNgIncludeForIcon(errorCtrl.selectedItem.imageUrl)"/>\n    </div>\n    <span class="input-extensions-branded-search-name" ng-bind="errorCtrl.selectedItem.name"></span>\n  </div>\n  <div class="center-container" data-tid="input-extension-error" acc-role="dialog">\n    <span class="heading" ng-if="errorCtrl.errorMessageHeading">{{errorCtrl.errorMessageHeading}}</span>\n    <span>{{errorCtrl.errorMessage}}</span>\n  </div>\n</div>'}},[2600]);
//# sourceMappingURL=[[staticsPath]]/hashed/lazy-ng1-mod-fun-stuff-picker-components.min-fbc0cc1.js.map